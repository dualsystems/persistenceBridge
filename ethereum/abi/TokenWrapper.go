// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AbiABI is the input ABI used to generate the binding from.
const AbiABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateUTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"SetMinimumValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generateUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"generateUTokensInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinimumValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"}],\"name\":\"withdrawUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// AbiBin is the compiled bytecode used for deploying new contracts.
var AbiBin = "0x608060405234801561001057600080fd5b506139b1806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635c975abb116100b8578063ca15c8731161007c578063ca15c8731461058f578063cf756fdf146105d1578063d547741f1461065f578063e63ab1e9146106ad578063e7fa0a32146106cb578063ec1893b41461081757610137565b80635c975abb1461046b5780638456cb591461048b5780639010d07c146104ab57806391d148541461050d578063a217fddf1461057157610137565b80632f2ff15d116100ff5780632f2ff15d1461027c57806336568abe146102ca5780633f4ba83a14610318578063428bee9e1461033857806351db00e71461041d57610137565b80630b78f9c01461013c578063118c38c71461018a57806321bdf9e5146101a857806322dd9bc3146101ec578063248a9ca31461023a575b600080fd5b6101726004803603604081101561015257600080fd5b810190808035906020019092919080359060200190929190505050610851565b60405180821515815260200191505060405180910390f35b610192610913565b6040518082815260200191505060405180910390f35b6101ea600480360360208110156101be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610937565b005b6102386004803603604081101561020257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a27565b005b6102666004803603602081101561025057600080fd5b8101908080359060200190929190505050610bea565b6040518082815260200191505060405180910390f35b6102c86004803603604081101561029257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c0a565b005b610316600480360360408110156102e057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c94565b005b610320610d2d565b60405180821515815260200191505060405180910390f35b61041b6004803603606081101561034e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460018302840111640100000000831117156103c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610dc4565b005b6104536004803603604081101561043357600080fd5b8101908080359060200190929190803590602001909291905050506113f4565b60405180821515815260200191505060405180910390f35b6104736114b6565b60405180821515815260200191505060405180910390f35b6104936114cd565b60405180821515815260200191505060405180910390f35b6104e1600480360360408110156104c157600080fd5b810190808035906020019092919080359060200190929190505050611564565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105596004803603604081101561052357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611596565b60405180821515815260200191505060405180910390f35b6105796115c8565b6040518082815260200191505060405180910390f35b6105bb600480360360208110156105a557600080fd5b81019080803590602001909291905050506115cf565b6040518082815260200191505060405180910390f35b61065d600480360360808110156105e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115f6565b005b6106ab6004803603604081101561067557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611820565b005b6106b56118aa565b6040518082815260200191505060405180910390f35b610815600480360360408110156106e157600080fd5b81019080803590602001906401000000008111156106fe57600080fd5b82018360208201111561071057600080fd5b8035906020019184602083028401116401000000008311171561073257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561079257600080fd5b8201836020820111156107a457600080fd5b803590602001918460208302840111640100000000831117156107c657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506118ce565b005b61081f611b75565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b60006108676000801b610862611b9d565b611596565b6108bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180613892602d913960400191505060405180910390fd5b82609a8190555081609b819055507f3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d15328383604051808381526020018281526020019250505060405180910390a16001905092915050565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf81565b61094b6000801b610946611b9d565b611596565b6109a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806138066038913960400191505060405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c60405160405180910390a250565b610a2f6114b6565b15610aa2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60008111610afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806136cc602b913960400191505060405180910390fd5b610b2c7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf610b27611b9d565b611596565b610b81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061368e603e913960400191505060405180910390fd5b6000610b8d8383611ba5565b90508273ffffffffffffffffffffffffffffffffffffffff167f06d08f8705b74e3172df8733fc5da269157556d015544994a9759be4693d3ff58242604051808381526020018281526020019250505060405180910390a2505050565b600060656000838152602001908152602001600020600201549050919050565b610c316065600084815260200190815260200160002060020154610c2c611b9d565b611596565b610c86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061365f602f913960400191505060405180910390fd5b610c908282611ce1565b5050565b610c9c611b9d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613919602f913960400191505060405180910390fd5b610d298282611d75565b5050565b6000610d607f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610d5b611b9d565b611596565b610db5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806138bf6036913960400191505060405180910390fd5b610dbd611e09565b6001905090565b610dcc6114b6565b15610e3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6099548211610e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613782602c913960400191505060405180910390fd5b6000610fe8609d8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f345780601f10610f0957610100808354040283529160200191610f34565b820191906000526020600020905b815481529060010190602001808311610f1757829003601f168201915b5050505050609e8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fcf5780601f10610fa457610100808354040283529160200191610fcf565b820191906000526020600020905b815481529060010190602001808311610fb257829003601f168201915b5050505050609f5485611ef4909392919063ffffffff16565b90506001151581151514611047576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806138f56024913960400191505060405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110d257600080fd5b505afa1580156110e6573d6000803e3d6000fd5b505050506040513d60208110156110fc57600080fd5b8101908080519060200190929190505050905083811015611168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001806136f7602d913960400191505060405180910390fd5b611170611b9d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806138616031913960400191505060405180910390fd5b600061125861120e6064609c5461204290919063ffffffff16565b61124a609b5461123c609c5461122e60648c61204290919063ffffffff16565b61204290919063ffffffff16565b6120c890919063ffffffff16565b61214b90919063ffffffff16565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac87836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156112ed57600080fd5b505af1158015611301573d6000803e3d6000fd5b505050506040513d602081101561131757600080fd5b8101908080519060200190929190505050508573ffffffffffffffffffffffffffffffffffffffff167fc2db0b30181b3532965e53ba1bdf883b207dccb658a9589865c5a9c91e28b80b8286426040518084815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b838110156113b0578082015181840152602081019050611395565b50505050905090810190601f1680156113dd5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2505050505050565b600061140a6000801b611405611b9d565b611596565b61145f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260378152602001806137cf6037913960400191505060405180910390fd5b82609881905550816099819055507fa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe38383604051808381526020018281526020019250505060405180910390a16001905092915050565b6000603360009054906101000a900460ff16905090565b60006115007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6114fb611b9d565b611596565b611555576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806139486034913960400191505060405180910390fd5b61155d6121d4565b6001905090565b600061158e82606560008681526020019081526020016000206000016122c090919063ffffffff16565b905092915050565b60006115c082606560008681526020019081526020016000206000016122da90919063ffffffff16565b905092915050565b6000801b81565b60006115ef6065600084815260200190815260200160002060000161230a565b9050919050565b600060019054906101000a900460ff1680611615575061161461231f565b5b8061162b575060008054906101000a900460ff16155b611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156116d0576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6116d8612330565b6116e061243e565b6116f46000801b6116ef611b9d565b61254c565b61171e7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf8561254c565b6117487f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8461254c565b61175185610937565b81609c819055506040518060400160405280600681526020017f636f736d6f730000000000000000000000000000000000000000000000000000815250609d90805190602001906117a3929190613591565b506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250609e90805190602001906117ef929190613591565b506026609f8190555080156118195760008060016101000a81548160ff0219169083151502179055505b5050505050565b6118476065600084815260200190815260200160002060020154611842611b9d565b611596565b61189c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806137246030913960400191505060405180910390fd5b6118a68282611d75565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6118d66114b6565b15611949576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b80518251146119a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061383e6023913960400191505060405180910390fd5b6119d47f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf6119cf611b9d565b611596565b611a29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061368e603e913960400191505060405180910390fd5b600080600091505b8351821015611af3576000838381518110611a4857fe5b602002602001015111611aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001806136cc602b913960400191505060405180910390fd5b611ad6848381518110611ab557fe5b6020026020010151848481518110611ac957fe5b6020026020010151611ba5565b9050611aec60018361255a90919063ffffffff16565b9150611a31565b83611b086001846120c890919063ffffffff16565b81518110611b1257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f06d08f8705b74e3172df8733fc5da269157556d015544994a9759be4693d3ff58242604051808381526020018281526020019250505060405180910390a250505050565b6000806000806000609a549450609b54935060985492506099549150609c5490509091929394565b600033905090565b6000611c0a611bc06064609c5461204290919063ffffffff16565b611bfc609a54611bee609c54611be060648961204290919063ffffffff16565b61204290919063ffffffff16565b6120c890919063ffffffff16565b61214b90919063ffffffff16565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c9f57600080fd5b505af1158015611cb3573d6000803e3d6000fd5b505050506040513d6020811015611cc957600080fd5b81019080805190602001909291905050505092915050565b611d0981606560008581526020019081526020016000206000016125e290919063ffffffff16565b15611d7157611d16611b9d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611d9d816065600085815260200190815260200160002060000161261290919063ffffffff16565b15611e0557611daa611b9d565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611e116114b6565b611e83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611ec7611b9d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000808590506000611f1360008751846126429092919063ffffffff16565b9050611f2886826127b490919063ffffffff16565b611f375760009250505061203a565b6000611f5082516001856126429092919063ffffffff16565b9050611f6586826127b490919063ffffffff16565b611f75576000935050505061203a565b6000611f9760018451016001855187510303866126429092919063ffffffff16565b905085815114611fae57600094505050505061203a565b6000611fd360018551016001865160068951030303876126429092919063ffffffff16565b90506000611fe082612821565b9050600081511415611ffb576000965050505050505061203a565b6000612006866129fa565b905060006120148284612a9a565b9050600061202b82876127b490919063ffffffff16565b90508099505050505050505050505b949350505050565b60008083141561205557600090506120c2565b600082840290508284828161206657fe5b04146120bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806137ae6021913960400191505060405180910390fd5b809150505b92915050565b600082821115612140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60008082116121c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b8183816121cb57fe5b04905092915050565b6121dc6114b6565b1561224f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612293611b9d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006122cf8360000183612bc2565b60001c905092915050565b6000612302836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c45565b905092915050565b600061231882600001612c68565b9050919050565b600061232a30612c79565b15905090565b600060019054906101000a900460ff168061234f575061234e61231f565b5b80612365575060008054906101000a900460ff16155b6123ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561240a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612412612c8c565b61241a612d8a565b801561243b5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061245d575061245c61231f565b5b80612473575060008054906101000a900460ff16155b6124c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612518576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612520612c8c565b612528612e88565b80156125495760008060016101000a81548160ff0219169083151502179055505b50565b6125568282611ce1565b5050565b6000808284019050838110156125d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600061260a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612fa1565b905092915050565b600061263a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613011565b905092915050565b606081601f830110156126bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f736c6963655f6f766572666c6f7700000000000000000000000000000000000081525060200191505060405180910390fd5b81830184511015612736576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736c6963655f6f75744f66426f756e647300000000000000000000000000000081525060200191505060405180910390fd5b606082156000811461275757604051915060008252602082016040526127a8565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156127955780518352602083019250602081019050612778565b50868552601f19601f8301166040525050505b50809150509392505050565b60008060019050835183518114600181146127d25760009250612815565b600160208701838101602088015b6002848385100114156128105780518351146127ff5760009650600093505b6020830192506020810190506127e0565b505050505b50508091505092915050565b6060815167ffffffffffffffff8111801561283b57600080fd5b5060405190808252806020026020018201604052801561286a5781602001602082028036833780820191505090505b5090506060600080600090505b84518110156129f157600091505b6040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c81525051821015612982576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250828151811061290457fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191685828151811061293d57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561297557612982565b8180600101925050612885565b6040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250518214156129cb578293505050506129f5565b818482815181106129d857fe5b6020026020010181815250508080600101915050612877565b5050505b919050565b6060815167ffffffffffffffff81118015612a1457600080fd5b50604051908082528060200260200182016040528015612a435781602001602082028036833780820191505090505b50905060005b8251811015612a9457828181518110612a5e57fe5b602001015160f81c60f81b60f81c60ff16828281518110612a7b57fe5b6020026020010181815250508080600101915050612a49565b50919050565b60606000612ab183612aac86866130f9565b6131c4565b90506000815167ffffffffffffffff81118015612acd57600080fd5b506040519080825280601f01601f191660200182016040528015612b005781602001600182028036833780820191505090505b50905060005b8251811015612bb6576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250838281518110612b5157fe5b602002602001015181518110612b6357fe5b602001015160f81c60f81b828281518110612b7a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612b06565b50809250505092915050565b600081836000018054905011612c23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061363d6022913960400191505060405180910390fd5b826000018281548110612c3257fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b600080823b905060008111915050919050565b600060019054906101000a900460ff1680612cab5750612caa61231f565b5b80612cc1575060008054906101000a900460ff16155b612d16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612d66576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612d875760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612da95750612da861231f565b5b80612dbf575060008054906101000a900460ff16155b612e14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612e64576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612e855760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612ea75750612ea661231f565b5b80612ebd575060008054906101000a900460ff16155b612f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613754602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612f62576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000603360006101000a81548160ff0219169083151502179055508015612f9e5760008060016101000a81548160ff0219169083151502179055505b50565b6000612fad8383612c45565b61300657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061300b565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146130ed576000600182039050600060018660000180549050039050600086600001828154811061305c57fe5b906000526020600020015490508087600001848154811061307957fe5b90600052602060002001819055506001830187600101600083815260200190815260200160002081905550866000018054806130b157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506130f3565b60009150505b92915050565b6060600061311b61311261310c866132af565b856131c4565b600060066133c0565b90506000600161312a83613499565b1890506000600667ffffffffffffffff8111801561314757600080fd5b506040519080825280602002602001820160405280156131765781602001602082028036833780820191505090505b50905060005b60068110156131b757601f8160050360050284901c1682828151811061319e57fe5b602002602001018181525050808060010191505061317c565b5080935050505092915050565b60606000825184510167ffffffffffffffff811180156131e357600080fd5b506040519080825280602002602001820160405280156132125781602001602082028036833780820191505090505b50905060005b845181101561325a5784818151811061322d57fe5b602002602001015182828151811061324157fe5b6020026020010181815250508080600101915050613218565b60005b84518110156132a35784818060010192508151811061327857fe5b602002602001015183838060010194508151811061329257fe5b60200260200101818152505061325d565b82935050505092915050565b60606000600183518451010167ffffffffffffffff811180156132d157600080fd5b506040519080825280602002602001820160405280156133005781602001602082028036833780820191505090505b50905060005b835181101561334c57600584828151811061331d57fe5b6020026020010151901c82828151811061333357fe5b6020026020010181815250508080600101915050613306565b5060008184518151811061335c57fe5b60200260200101818152505060005b83518110156133b657601f84828151811061338257fe5b60200260200101511682600186518401018151811061339d57fe5b602002602001018181525050808060010191505061336b565b5080915050919050565b606060008285510167ffffffffffffffff811180156133de57600080fd5b5060405190808252806020026020018201604052801561340d5781602001602082028036833780820191505090505b50905060005b85518110156134555785818151811061342857fe5b602002602001015182828151811061343c57fe5b6020026020010181815250508080600101915050613413565b60005b8481101561348c578583838060010194508151811061347357fe5b6020026020010181815250508080600101915050613458565b8293505050509392505050565b6000806040518060a00160405280633b6a57b263ffffffff1681526020016326508e6d63ffffffff168152602001631ea119fa63ffffffff168152602001633d4233dd63ffffffff168152602001632a1462b363ffffffff16815250905060006001905060005b8451811015613586576000601983901c905085828151811061351e57fe5b602002602001015160056301ffffff8516901b18925060005b6005811015613577576001808284901c16141561356a5784816005811061355a57fe5b602002015163ffffffff16841893505b8080600101915050613537565b50508080600101915050613500565b508092505050919050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826135c7576000855561360e565b82601f106135e057805160ff191683800117855561360e565b8280016001018555821561360e579182015b8281111561360d5782518255916020019190600101906135f2565b5b50905061361b919061361f565b5090565b5b80821115613638576000816000905550600101613620565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74546f6b656e577261707065723a204f6e6c79206272696467652061646d696e2063616e206d696e74206e657720746f6b656e7320666f7220612075736572546f6b656e577261707065723a2052657175697265732061206d696e206465706f73697420616d6f756e74546f6b656e577261707065723a20496e737566666369656e742062616c616e636520666f72206163636f756e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564546f6b656e577261707065723a2052657175697265732061206d696e20776974686472617720616d6f756e74536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e577261707065723a2055736572206e6f7420617574686f726973656420746f20736574206d696e696d756d2076616c756573546f6b656e577261707065723a2055736572206e6f7420617574686f726973656420746f207365742055546f6b656e20636f6e7472616374546f6b656e577261707065723a204d69736d61746368206172726179206c656e677468546f6b656e577261707065723a2057697468647261772063616e206f6e6c7920626520646f6e65206279205374616b6572546f6b656e577261707065723a2055736572206e6f7420617574686f726973656420746f207365742066656573546f6b656e577261707065723a2055736572206e6f7420617574686f726973656420746f20756e706175736520636f6e747261637473546f6b656e577261707065723a20496e76616c696420636861696e206164647265737320416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66546f6b656e577261707065723a2055736572206e6f7420617574686f726973656420746f20706175736520636f6e747261637473a2646970667358221220783c9e648e0b1553b100288637125b0265184c3ad9f76f05205e8df9974b6e0c64736f6c63430007060033"

// DeployAbi deploys a new Ethereum contract, binding an instance of Abi to it.
func DeployAbi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Abi, error) {
	parsed, err := abi.JSON(strings.NewReader(AbiABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AbiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Abi{AbiCaller: AbiCaller{contract: contract}, AbiTransactor: AbiTransactor{contract: contract}, AbiFilterer: AbiFilterer{contract: contract}}, nil
}

// Abi is an auto generated Go binding around an Ethereum contract.
type Abi struct {
	AbiCaller     // Read-only binding to the contract
	AbiTransactor // Write-only binding to the contract
	AbiFilterer   // Log filterer for contract events
}

// AbiCaller is an auto generated read-only Go binding around an Ethereum contract.
type AbiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AbiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AbiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AbiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AbiSession struct {
	Contract     *Abi              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AbiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AbiCallerSession struct {
	Contract *AbiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// AbiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AbiTransactorSession struct {
	Contract     *AbiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AbiRaw is an auto generated low-level Go binding around an Ethereum contract.
type AbiRaw struct {
	Contract *Abi // Generic contract binding to access the raw methods on
}

// AbiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AbiCallerRaw struct {
	Contract *AbiCaller // Generic read-only contract binding to access the raw methods on
}

// AbiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AbiTransactorRaw struct {
	Contract *AbiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAbi creates a new instance of Abi, bound to a specific deployed contract.
func NewAbi(address common.Address, backend bind.ContractBackend) (*Abi, error) {
	contract, err := bindAbi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Abi{AbiCaller: AbiCaller{contract: contract}, AbiTransactor: AbiTransactor{contract: contract}, AbiFilterer: AbiFilterer{contract: contract}}, nil
}

// NewAbiCaller creates a new read-only instance of Abi, bound to a specific deployed contract.
func NewAbiCaller(address common.Address, caller bind.ContractCaller) (*AbiCaller, error) {
	contract, err := bindAbi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AbiCaller{contract: contract}, nil
}

// NewAbiTransactor creates a new write-only instance of Abi, bound to a specific deployed contract.
func NewAbiTransactor(address common.Address, transactor bind.ContractTransactor) (*AbiTransactor, error) {
	contract, err := bindAbi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AbiTransactor{contract: contract}, nil
}

// NewAbiFilterer creates a new log filterer instance of Abi, bound to a specific deployed contract.
func NewAbiFilterer(address common.Address, filterer bind.ContractFilterer) (*AbiFilterer, error) {
	contract, err := bindAbi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AbiFilterer{contract: contract}, nil
}

// bindAbi binds a generic wrapper to an already deployed contract.
func bindAbi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AbiABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Abi *AbiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Abi.Contract.AbiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Abi *AbiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Abi.Contract.AbiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Abi *AbiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Abi.Contract.AbiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Abi *AbiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Abi.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Abi *AbiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Abi.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Abi *AbiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Abi.Contract.contract.Transact(opts, method, params...)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiCaller) BRIDGEADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "BRIDGE_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _Abi.Contract.BRIDGEADMINROLE(&_Abi.CallOpts)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiCallerSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _Abi.Contract.BRIDGEADMINROLE(&_Abi.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Abi.Contract.DEFAULTADMINROLE(&_Abi.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Abi *AbiCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Abi.Contract.DEFAULTADMINROLE(&_Abi.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Abi *AbiCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Abi *AbiSession) PAUSERROLE() ([32]byte, error) {
	return _Abi.Contract.PAUSERROLE(&_Abi.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_Abi *AbiCallerSession) PAUSERROLE() ([32]byte, error) {
	return _Abi.Contract.PAUSERROLE(&_Abi.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_Abi *AbiCaller) GetProps(opts *bind.CallOpts) (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "getProps")

	outstruct := new(struct {
		DepositFee   *big.Int
		WithdrawFee  *big.Int
		MinDeposit   *big.Int
		MinWithdraw  *big.Int
		ValueDivisor *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinDeposit = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinWithdraw = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ValueDivisor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_Abi *AbiSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _Abi.Contract.GetProps(&_Abi.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_Abi *AbiCallerSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _Abi.Contract.GetProps(&_Abi.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Abi *AbiCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Abi *AbiSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Abi.Contract.GetRoleAdmin(&_Abi.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Abi *AbiCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Abi.Contract.GetRoleAdmin(&_Abi.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Abi *AbiCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Abi *AbiSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Abi.Contract.GetRoleMember(&_Abi.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Abi *AbiCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Abi.Contract.GetRoleMember(&_Abi.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Abi *AbiCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Abi *AbiSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Abi.Contract.GetRoleMemberCount(&_Abi.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Abi *AbiCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Abi.Contract.GetRoleMemberCount(&_Abi.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Abi *AbiCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Abi *AbiSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Abi.Contract.HasRole(&_Abi.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Abi *AbiCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Abi.Contract.HasRole(&_Abi.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Abi *AbiCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Abi.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Abi *AbiSession) Paused() (bool, error) {
	return _Abi.Contract.Paused(&_Abi.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Abi *AbiCallerSession) Paused() (bool, error) {
	return _Abi.Contract.Paused(&_Abi.CallOpts)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_Abi *AbiTransactor) GenerateUTokens(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "generateUTokens", to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_Abi *AbiSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.GenerateUTokens(&_Abi.TransactOpts, to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_Abi *AbiTransactorSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.GenerateUTokens(&_Abi.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_Abi *AbiTransactor) GenerateUTokensInBatch(opts *bind.TransactOpts, to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "generateUTokensInBatch", to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_Abi *AbiSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _Abi.Contract.GenerateUTokensInBatch(&_Abi.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_Abi *AbiTransactorSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _Abi.Contract.GenerateUTokensInBatch(&_Abi.TransactOpts, to, amount)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Abi *AbiSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.GrantRole(&_Abi.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.GrantRole(&_Abi.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_Abi *AbiTransactor) Initialize(opts *bind.TransactOpts, uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "initialize", uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_Abi *AbiSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.Initialize(&_Abi.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_Abi *AbiTransactorSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.Initialize(&_Abi.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_Abi *AbiTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_Abi *AbiSession) Pause() (*types.Transaction, error) {
	return _Abi.Contract.Pause(&_Abi.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_Abi *AbiTransactorSession) Pause() (*types.Transaction, error) {
	return _Abi.Contract.Pause(&_Abi.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Abi *AbiSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.RenounceRole(&_Abi.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.RenounceRole(&_Abi.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Abi *AbiSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.RevokeRole(&_Abi.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Abi *AbiTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Abi.Contract.RevokeRole(&_Abi.TransactOpts, role, account)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_Abi *AbiTransactor) SetFees(opts *bind.TransactOpts, depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "setFees", depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_Abi *AbiSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.SetFees(&_Abi.TransactOpts, depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_Abi *AbiTransactorSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.SetFees(&_Abi.TransactOpts, depositFee, withdrawFee)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_Abi *AbiTransactor) SetMinimumValues(opts *bind.TransactOpts, minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "setMinimumValues", minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_Abi *AbiSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.SetMinimumValues(&_Abi.TransactOpts, minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_Abi *AbiTransactorSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _Abi.Contract.SetMinimumValues(&_Abi.TransactOpts, minDeposit, minWithdraw)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_Abi *AbiTransactor) SetUTokensContract(opts *bind.TransactOpts, uAddress common.Address) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "setUTokensContract", uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_Abi *AbiSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _Abi.Contract.SetUTokensContract(&_Abi.TransactOpts, uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_Abi *AbiTransactorSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _Abi.Contract.SetUTokensContract(&_Abi.TransactOpts, uAddress)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_Abi *AbiTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_Abi *AbiSession) Unpause() (*types.Transaction, error) {
	return _Abi.Contract.Unpause(&_Abi.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_Abi *AbiTransactorSession) Unpause() (*types.Transaction, error) {
	return _Abi.Contract.Unpause(&_Abi.TransactOpts)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_Abi *AbiTransactor) WithdrawUTokens(opts *bind.TransactOpts, from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _Abi.contract.Transact(opts, "withdrawUTokens", from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_Abi *AbiSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _Abi.Contract.WithdrawUTokens(&_Abi.TransactOpts, from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_Abi *AbiTransactorSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _Abi.Contract.WithdrawUTokens(&_Abi.TransactOpts, from, tokens, toChainAddress)
}

// AbiGenerateUTokensIterator is returned from FilterGenerateUTokens and is used to iterate over the raw logs and unpacked data for GenerateUTokens events raised by the Abi contract.
type AbiGenerateUTokensIterator struct {
	Event *AbiGenerateUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiGenerateUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiGenerateUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiGenerateUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiGenerateUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiGenerateUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiGenerateUTokens represents a GenerateUTokens event raised by the Abi contract.
type AbiGenerateUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGenerateUTokens is a free log retrieval operation binding the contract event 0x06d08f8705b74e3172df8733fc5da269157556d015544994a9759be4693d3ff5.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_Abi *AbiFilterer) FilterGenerateUTokens(opts *bind.FilterOpts, accountAddress []common.Address) (*AbiGenerateUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "GenerateUTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &AbiGenerateUTokensIterator{contract: _Abi.contract, event: "GenerateUTokens", logs: logs, sub: sub}, nil
}

// WatchGenerateUTokens is a free log subscription operation binding the contract event 0x06d08f8705b74e3172df8733fc5da269157556d015544994a9759be4693d3ff5.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_Abi *AbiFilterer) WatchGenerateUTokens(opts *bind.WatchOpts, sink chan<- *AbiGenerateUTokens, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "GenerateUTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiGenerateUTokens)
				if err := _Abi.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGenerateUTokens is a log parse operation binding the contract event 0x06d08f8705b74e3172df8733fc5da269157556d015544994a9759be4693d3ff5.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_Abi *AbiFilterer) ParseGenerateUTokens(log types.Log) (*AbiGenerateUTokens, error) {
	event := new(AbiGenerateUTokens)
	if err := _Abi.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Abi contract.
type AbiPausedIterator struct {
	Event *AbiPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiPaused represents a Paused event raised by the Abi contract.
type AbiPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Abi *AbiFilterer) FilterPaused(opts *bind.FilterOpts) (*AbiPausedIterator, error) {

	logs, sub, err := _Abi.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &AbiPausedIterator{contract: _Abi.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Abi *AbiFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *AbiPaused) (event.Subscription, error) {

	logs, sub, err := _Abi.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiPaused)
				if err := _Abi.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Abi *AbiFilterer) ParsePaused(log types.Log) (*AbiPaused, error) {
	event := new(AbiPaused)
	if err := _Abi.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the Abi contract.
type AbiRoleAdminChangedIterator struct {
	Event *AbiRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiRoleAdminChanged represents a RoleAdminChanged event raised by the Abi contract.
type AbiRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Abi *AbiFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*AbiRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &AbiRoleAdminChangedIterator{contract: _Abi.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Abi *AbiFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *AbiRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiRoleAdminChanged)
				if err := _Abi.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_Abi *AbiFilterer) ParseRoleAdminChanged(log types.Log) (*AbiRoleAdminChanged, error) {
	event := new(AbiRoleAdminChanged)
	if err := _Abi.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Abi contract.
type AbiRoleGrantedIterator struct {
	Event *AbiRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiRoleGranted represents a RoleGranted event raised by the Abi contract.
type AbiRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AbiRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AbiRoleGrantedIterator{contract: _Abi.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *AbiRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiRoleGranted)
				if err := _Abi.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) ParseRoleGranted(log types.Log) (*AbiRoleGranted, error) {
	event := new(AbiRoleGranted)
	if err := _Abi.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Abi contract.
type AbiRoleRevokedIterator struct {
	Event *AbiRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiRoleRevoked represents a RoleRevoked event raised by the Abi contract.
type AbiRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*AbiRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &AbiRoleRevokedIterator{contract: _Abi.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *AbiRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiRoleRevoked)
				if err := _Abi.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Abi *AbiFilterer) ParseRoleRevoked(log types.Log) (*AbiRoleRevoked, error) {
	event := new(AbiRoleRevoked)
	if err := _Abi.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiSetFeesIterator is returned from FilterSetFees and is used to iterate over the raw logs and unpacked data for SetFees events raised by the Abi contract.
type AbiSetFeesIterator struct {
	Event *AbiSetFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiSetFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiSetFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiSetFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiSetFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiSetFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiSetFees represents a SetFees event raised by the Abi contract.
type AbiSetFees struct {
	DepositFee  *big.Int
	WithdrawFee *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFees is a free log retrieval operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_Abi *AbiFilterer) FilterSetFees(opts *bind.FilterOpts) (*AbiSetFeesIterator, error) {

	logs, sub, err := _Abi.contract.FilterLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return &AbiSetFeesIterator{contract: _Abi.contract, event: "SetFees", logs: logs, sub: sub}, nil
}

// WatchSetFees is a free log subscription operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_Abi *AbiFilterer) WatchSetFees(opts *bind.WatchOpts, sink chan<- *AbiSetFees) (event.Subscription, error) {

	logs, sub, err := _Abi.contract.WatchLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiSetFees)
				if err := _Abi.contract.UnpackLog(event, "SetFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFees is a log parse operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_Abi *AbiFilterer) ParseSetFees(log types.Log) (*AbiSetFees, error) {
	event := new(AbiSetFees)
	if err := _Abi.contract.UnpackLog(event, "SetFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiSetMinimumValuesIterator is returned from FilterSetMinimumValues and is used to iterate over the raw logs and unpacked data for SetMinimumValues events raised by the Abi contract.
type AbiSetMinimumValuesIterator struct {
	Event *AbiSetMinimumValues // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiSetMinimumValuesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiSetMinimumValues)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiSetMinimumValues)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiSetMinimumValuesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiSetMinimumValuesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiSetMinimumValues represents a SetMinimumValues event raised by the Abi contract.
type AbiSetMinimumValues struct {
	MinDeposit  *big.Int
	MinWithdraw *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetMinimumValues is a free log retrieval operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_Abi *AbiFilterer) FilterSetMinimumValues(opts *bind.FilterOpts) (*AbiSetMinimumValuesIterator, error) {

	logs, sub, err := _Abi.contract.FilterLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return &AbiSetMinimumValuesIterator{contract: _Abi.contract, event: "SetMinimumValues", logs: logs, sub: sub}, nil
}

// WatchSetMinimumValues is a free log subscription operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_Abi *AbiFilterer) WatchSetMinimumValues(opts *bind.WatchOpts, sink chan<- *AbiSetMinimumValues) (event.Subscription, error) {

	logs, sub, err := _Abi.contract.WatchLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiSetMinimumValues)
				if err := _Abi.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinimumValues is a log parse operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_Abi *AbiFilterer) ParseSetMinimumValues(log types.Log) (*AbiSetMinimumValues, error) {
	event := new(AbiSetMinimumValues)
	if err := _Abi.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the Abi contract.
type AbiSetUTokensContractIterator struct {
	Event *AbiSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiSetUTokensContract represents a SetUTokensContract event raised by the Abi contract.
type AbiSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_Abi *AbiFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*AbiSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &AbiSetUTokensContractIterator{contract: _Abi.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_Abi *AbiFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *AbiSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiSetUTokensContract)
				if err := _Abi.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_Abi *AbiFilterer) ParseSetUTokensContract(log types.Log) (*AbiSetUTokensContract, error) {
	event := new(AbiSetUTokensContract)
	if err := _Abi.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Abi contract.
type AbiUnpausedIterator struct {
	Event *AbiUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiUnpaused represents a Unpaused event raised by the Abi contract.
type AbiUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Abi *AbiFilterer) FilterUnpaused(opts *bind.FilterOpts) (*AbiUnpausedIterator, error) {

	logs, sub, err := _Abi.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &AbiUnpausedIterator{contract: _Abi.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Abi *AbiFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *AbiUnpaused) (event.Subscription, error) {

	logs, sub, err := _Abi.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiUnpaused)
				if err := _Abi.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Abi *AbiFilterer) ParseUnpaused(log types.Log) (*AbiUnpaused, error) {
	event := new(AbiUnpaused)
	if err := _Abi.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AbiWithdrawUTokensIterator is returned from FilterWithdrawUTokens and is used to iterate over the raw logs and unpacked data for WithdrawUTokens events raised by the Abi contract.
type AbiWithdrawUTokensIterator struct {
	Event *AbiWithdrawUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AbiWithdrawUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AbiWithdrawUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AbiWithdrawUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AbiWithdrawUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AbiWithdrawUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AbiWithdrawUTokens represents a WithdrawUTokens event raised by the Abi contract.
type AbiWithdrawUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	ToChainAddress string
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUTokens is a free log retrieval operation binding the contract event 0xc2db0b30181b3532965e53ba1bdf883b207dccb658a9589865c5a9c91e28b80b.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 tokens, string toChainAddress, uint256 timestamp)
func (_Abi *AbiFilterer) FilterWithdrawUTokens(opts *bind.FilterOpts, accountAddress []common.Address) (*AbiWithdrawUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _Abi.contract.FilterLogs(opts, "WithdrawUTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &AbiWithdrawUTokensIterator{contract: _Abi.contract, event: "WithdrawUTokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawUTokens is a free log subscription operation binding the contract event 0xc2db0b30181b3532965e53ba1bdf883b207dccb658a9589865c5a9c91e28b80b.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 tokens, string toChainAddress, uint256 timestamp)
func (_Abi *AbiFilterer) WatchWithdrawUTokens(opts *bind.WatchOpts, sink chan<- *AbiWithdrawUTokens, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _Abi.contract.WatchLogs(opts, "WithdrawUTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AbiWithdrawUTokens)
				if err := _Abi.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUTokens is a log parse operation binding the contract event 0xc2db0b30181b3532965e53ba1bdf883b207dccb658a9589865c5a9c91e28b80b.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 tokens, string toChainAddress, uint256 timestamp)
func (_Abi *AbiFilterer) ParseWithdrawUTokens(log types.Log) (*AbiWithdrawUTokens, error) {
	event := new(AbiWithdrawUTokens)
	if err := _Abi.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
