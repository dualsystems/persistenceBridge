// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package liquidStaking

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LiquidStakingMetaData contains all meta data concerning the LiquidStaking contract.
var LiquidStakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"}],\"name\":\"SetMinimumValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetSTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"}],\"name\":\"SetUnstakeEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"name\":\"SetUnstakingLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnstakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnstakeTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeUnstakeProps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalUnbondedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unbondingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalUnbondingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unbondingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnstakeEpochMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeEpochMilestone\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"}],\"name\":\"setMinimumValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sAddress\",\"type\":\"address\"}],\"name\":\"setSTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"}],\"name\":\"setUnstakeEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"name\":\"setUnstakingLockTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawUnstakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// LiquidStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStakingMetaData.ABI instead.
var LiquidStakingABI = LiquidStakingMetaData.ABI

// LiquidStakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStakingMetaData.Bin instead.
var LiquidStakingBin = LiquidStakingMetaData.Bin

// DeployLiquidStaking deploys a new Ethereum contract, binding an instance of LiquidStaking to it.
func DeployLiquidStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidStaking, error) {
	parsed, err := LiquidStakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidStaking{LiquidStakingCaller: LiquidStakingCaller{contract: contract}, LiquidStakingTransactor: LiquidStakingTransactor{contract: contract}, LiquidStakingFilterer: LiquidStakingFilterer{contract: contract}}, nil
}

// LiquidStaking is an auto generated Go binding around an Ethereum contract.
type LiquidStaking struct {
	LiquidStakingCaller     // Read-only binding to the contract
	LiquidStakingTransactor // Write-only binding to the contract
	LiquidStakingFilterer   // Log filterer for contract events
}

// LiquidStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStakingSession struct {
	Contract     *LiquidStaking    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStakingCallerSession struct {
	Contract *LiquidStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// LiquidStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStakingTransactorSession struct {
	Contract     *LiquidStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LiquidStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStakingRaw struct {
	Contract *LiquidStaking // Generic contract binding to access the raw methods on
}

// LiquidStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStakingCallerRaw struct {
	Contract *LiquidStakingCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStakingTransactorRaw struct {
	Contract *LiquidStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidStaking creates a new instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStaking(address common.Address, backend bind.ContractBackend) (*LiquidStaking, error) {
	contract, err := bindLiquidStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidStaking{LiquidStakingCaller: LiquidStakingCaller{contract: contract}, LiquidStakingTransactor: LiquidStakingTransactor{contract: contract}, LiquidStakingFilterer: LiquidStakingFilterer{contract: contract}}, nil
}

// NewLiquidStakingCaller creates a new read-only instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingCaller(address common.Address, caller bind.ContractCaller) (*LiquidStakingCaller, error) {
	contract, err := bindLiquidStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingCaller{contract: contract}, nil
}

// NewLiquidStakingTransactor creates a new write-only instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStakingTransactor, error) {
	contract, err := bindLiquidStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingTransactor{contract: contract}, nil
}

// NewLiquidStakingFilterer creates a new log filterer instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStakingFilterer, error) {
	contract, err := bindLiquidStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingFilterer{contract: contract}, nil
}

// bindLiquidStaking binds a generic wrapper to an already deployed contract.
func bindLiquidStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStaking *LiquidStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStaking.Contract.LiquidStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStaking *LiquidStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.Contract.LiquidStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStaking *LiquidStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStaking.Contract.LiquidStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStaking *LiquidStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStaking *LiquidStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStaking *LiquidStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStaking.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.DEFAULTADMINROLE(&_LiquidStaking.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.DEFAULTADMINROLE(&_LiquidStaking.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) PAUSERROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.PAUSERROLE(&_LiquidStaking.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) PAUSERROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.PAUSERROLE(&_LiquidStaking.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LiquidStaking.Contract.GetRoleAdmin(&_LiquidStaking.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LiquidStaking.Contract.GetRoleAdmin(&_LiquidStaking.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LiquidStaking.Contract.GetRoleMember(&_LiquidStaking.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LiquidStaking.Contract.GetRoleMember(&_LiquidStaking.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LiquidStaking.Contract.GetRoleMemberCount(&_LiquidStaking.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LiquidStaking.Contract.GetRoleMemberCount(&_LiquidStaking.CallOpts, role)
}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingCaller) GetStakeUnstakeProps(opts *bind.CallOpts) (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getStakeUnstakeProps")

	outstruct := new(struct {
		StakeFee             *big.Int
		UnstakeFee           *big.Int
		MinStake             *big.Int
		MinUnstake           *big.Int
		ValueDivisor         *big.Int
		EpochInterval        *big.Int
		UnstakeEpoch         *big.Int
		UnstakeEpochPrevious *big.Int
		UnstakingLockTime    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StakeFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnstakeFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinStake = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinUnstake = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ValueDivisor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.EpochInterval = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpoch = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpochPrevious = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.UnstakingLockTime = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingSession) GetStakeUnstakeProps() (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	return _LiquidStaking.Contract.GetStakeUnstakeProps(&_LiquidStaking.CallOpts)
}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingCallerSession) GetStakeUnstakeProps() (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	return _LiquidStaking.Contract.GetStakeUnstakeProps(&_LiquidStaking.CallOpts)
}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCaller) GetTotalUnbondedTokens(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getTotalUnbondedTokens", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingSession) GetTotalUnbondedTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondedTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCallerSession) GetTotalUnbondedTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondedTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCaller) GetTotalUnbondingTokens(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getTotalUnbondingTokens", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingSession) GetTotalUnbondingTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondingTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCallerSession) GetTotalUnbondingTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondingTokens(&_LiquidStaking.CallOpts, staker)
}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingCaller) GetUnstakeEpochMilestone(opts *bind.CallOpts, _unstakeTimestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getUnstakeEpochMilestone", _unstakeTimestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingSession) GetUnstakeEpochMilestone(_unstakeTimestamp *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.GetUnstakeEpochMilestone(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingCallerSession) GetUnstakeEpochMilestone(_unstakeTimestamp *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.GetUnstakeEpochMilestone(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingCaller) GetUnstakeTime(opts *bind.CallOpts, _unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getUnstakeTime", _unstakeTimestamp)

	outstruct := new(struct {
		UnstakeTime          *big.Int
		UnstakeEpoch         *big.Int
		UnstakeEpochPrevious *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnstakeTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpoch = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpochPrevious = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingSession) GetUnstakeTime(_unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	return _LiquidStaking.Contract.GetUnstakeTime(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingCallerSession) GetUnstakeTime(_unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	return _LiquidStaking.Contract.GetUnstakeTime(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LiquidStaking.Contract.HasRole(&_LiquidStaking.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LiquidStaking.Contract.HasRole(&_LiquidStaking.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingSession) Paused() (bool, error) {
	return _LiquidStaking.Contract.Paused(&_LiquidStaking.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingCallerSession) Paused() (bool, error) {
	return _LiquidStaking.Contract.Paused(&_LiquidStaking.CallOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.GrantRole(&_LiquidStaking.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.GrantRole(&_LiquidStaking.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingTransactor) Initialize(opts *bind.TransactOpts, uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "initialize", uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingSession) Initialize(uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Initialize(&_LiquidStaking.TransactOpts, uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) Initialize(uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Initialize(&_LiquidStaking.TransactOpts, uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingSession) Pause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Pause(&_LiquidStaking.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) Pause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Pause(&_LiquidStaking.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RenounceRole(&_LiquidStaking.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RenounceRole(&_LiquidStaking.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RevokeRole(&_LiquidStaking.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RevokeRole(&_LiquidStaking.TransactOpts, role, account)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetFees(opts *bind.TransactOpts, stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setFees", stakeFee, unstakeFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetFees(stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetFees(&_LiquidStaking.TransactOpts, stakeFee, unstakeFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetFees(stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetFees(&_LiquidStaking.TransactOpts, stakeFee, unstakeFee)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetMinimumValues(opts *bind.TransactOpts, minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setMinimumValues", minStake, minUnstake)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetMinimumValues(minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetMinimumValues(&_LiquidStaking.TransactOpts, minStake, minUnstake)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetMinimumValues(minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetMinimumValues(&_LiquidStaking.TransactOpts, minStake, minUnstake)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingTransactor) SetSTokensContract(opts *bind.TransactOpts, sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setSTokensContract", sAddress)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingSession) SetSTokensContract(sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetSTokensContract(&_LiquidStaking.TransactOpts, sAddress)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) SetSTokensContract(sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetSTokensContract(&_LiquidStaking.TransactOpts, sAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingTransactor) SetUTokensContract(opts *bind.TransactOpts, uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUTokensContract", uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUTokensContract(&_LiquidStaking.TransactOpts, uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUTokensContract(&_LiquidStaking.TransactOpts, uAddress)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetUnstakeEpoch(opts *bind.TransactOpts, unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUnstakeEpoch", unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetUnstakeEpoch(unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakeEpoch(&_LiquidStaking.TransactOpts, unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetUnstakeEpoch(unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakeEpoch(&_LiquidStaking.TransactOpts, unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetUnstakingLockTime(opts *bind.TransactOpts, unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUnstakingLockTime", unstakingLockTime)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetUnstakingLockTime(unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakingLockTime(&_LiquidStaking.TransactOpts, unstakingLockTime)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetUnstakingLockTime(unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakingLockTime(&_LiquidStaking.TransactOpts, unstakingLockTime)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactor) Stake(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "stake", to, amount)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingSession) Stake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Stake(&_LiquidStaking.TransactOpts, to, amount)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactorSession) Stake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Stake(&_LiquidStaking.TransactOpts, to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactor) UnStake(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "unStake", to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingSession) UnStake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.UnStake(&_LiquidStaking.TransactOpts, to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactorSession) UnStake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.UnStake(&_LiquidStaking.TransactOpts, to, amount)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingSession) Unpause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Unpause(&_LiquidStaking.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) Unpause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Unpause(&_LiquidStaking.TransactOpts)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingTransactor) WithdrawUnstakedTokens(opts *bind.TransactOpts, staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "withdrawUnstakedTokens", staker)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingSession) WithdrawUnstakedTokens(staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.WithdrawUnstakedTokens(&_LiquidStaking.TransactOpts, staker)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) WithdrawUnstakedTokens(staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.WithdrawUnstakedTokens(&_LiquidStaking.TransactOpts, staker)
}

// LiquidStakingPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LiquidStaking contract.
type LiquidStakingPausedIterator struct {
	Event *LiquidStakingPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingPaused represents a Paused event raised by the LiquidStaking contract.
type LiquidStakingPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) FilterPaused(opts *bind.FilterOpts) (*LiquidStakingPausedIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingPausedIterator{contract: _LiquidStaking.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LiquidStakingPaused) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingPaused)
				if err := _LiquidStaking.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) ParsePaused(log types.Log) (*LiquidStakingPaused, error) {
	event := new(LiquidStakingPaused)
	if err := _LiquidStaking.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the LiquidStaking contract.
type LiquidStakingRoleAdminChangedIterator struct {
	Event *LiquidStakingRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleAdminChanged represents a RoleAdminChanged event raised by the LiquidStaking contract.
type LiquidStakingRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*LiquidStakingRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleAdminChangedIterator{contract: _LiquidStaking.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleAdminChanged)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleAdminChanged(log types.Log) (*LiquidStakingRoleAdminChanged, error) {
	event := new(LiquidStakingRoleAdminChanged)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the LiquidStaking contract.
type LiquidStakingRoleGrantedIterator struct {
	Event *LiquidStakingRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleGranted represents a RoleGranted event raised by the LiquidStaking contract.
type LiquidStakingRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LiquidStakingRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleGrantedIterator{contract: _LiquidStaking.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleGranted)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleGranted(log types.Log) (*LiquidStakingRoleGranted, error) {
	event := new(LiquidStakingRoleGranted)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the LiquidStaking contract.
type LiquidStakingRoleRevokedIterator struct {
	Event *LiquidStakingRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleRevoked represents a RoleRevoked event raised by the LiquidStaking contract.
type LiquidStakingRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LiquidStakingRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleRevokedIterator{contract: _LiquidStaking.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleRevoked)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleRevoked(log types.Log) (*LiquidStakingRoleRevoked, error) {
	event := new(LiquidStakingRoleRevoked)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetFeesIterator is returned from FilterSetFees and is used to iterate over the raw logs and unpacked data for SetFees events raised by the LiquidStaking contract.
type LiquidStakingSetFeesIterator struct {
	Event *LiquidStakingSetFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetFees represents a SetFees event raised by the LiquidStaking contract.
type LiquidStakingSetFees struct {
	StakeFee   *big.Int
	UnstakeFee *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetFees is a free log retrieval operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 stakeFee, uint256 unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetFees(opts *bind.FilterOpts) (*LiquidStakingSetFeesIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetFeesIterator{contract: _LiquidStaking.contract, event: "SetFees", logs: logs, sub: sub}, nil
}

// WatchSetFees is a free log subscription operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 stakeFee, uint256 unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetFees(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetFees) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetFees)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFees is a log parse operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 stakeFee, uint256 unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetFees(log types.Log) (*LiquidStakingSetFees, error) {
	event := new(LiquidStakingSetFees)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetMinimumValuesIterator is returned from FilterSetMinimumValues and is used to iterate over the raw logs and unpacked data for SetMinimumValues events raised by the LiquidStaking contract.
type LiquidStakingSetMinimumValuesIterator struct {
	Event *LiquidStakingSetMinimumValues // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetMinimumValuesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetMinimumValues)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetMinimumValues)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetMinimumValuesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetMinimumValuesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetMinimumValues represents a SetMinimumValues event raised by the LiquidStaking contract.
type LiquidStakingSetMinimumValues struct {
	MinStake   *big.Int
	MinUnstake *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetMinimumValues is a free log retrieval operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minStake, uint256 minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetMinimumValues(opts *bind.FilterOpts) (*LiquidStakingSetMinimumValuesIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetMinimumValuesIterator{contract: _LiquidStaking.contract, event: "SetMinimumValues", logs: logs, sub: sub}, nil
}

// WatchSetMinimumValues is a free log subscription operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minStake, uint256 minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetMinimumValues(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetMinimumValues) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetMinimumValues)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinimumValues is a log parse operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minStake, uint256 minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetMinimumValues(log types.Log) (*LiquidStakingSetMinimumValues, error) {
	event := new(LiquidStakingSetMinimumValues)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetSTokensContractIterator is returned from FilterSetSTokensContract and is used to iterate over the raw logs and unpacked data for SetSTokensContract events raised by the LiquidStaking contract.
type LiquidStakingSetSTokensContractIterator struct {
	Event *LiquidStakingSetSTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetSTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetSTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetSTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetSTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetSTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetSTokensContract represents a SetSTokensContract event raised by the LiquidStaking contract.
type LiquidStakingSetSTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetSTokensContract is a free log retrieval operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetSTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*LiquidStakingSetSTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetSTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetSTokensContractIterator{contract: _LiquidStaking.contract, event: "SetSTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetSTokensContract is a free log subscription operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetSTokensContract(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetSTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetSTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetSTokensContract)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetSTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSTokensContract is a log parse operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetSTokensContract(log types.Log) (*LiquidStakingSetSTokensContract, error) {
	event := new(LiquidStakingSetSTokensContract)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetSTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the LiquidStaking contract.
type LiquidStakingSetUTokensContractIterator struct {
	Event *LiquidStakingSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUTokensContract represents a SetUTokensContract event raised by the LiquidStaking contract.
type LiquidStakingSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*LiquidStakingSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUTokensContractIterator{contract: _LiquidStaking.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUTokensContract)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUTokensContract(log types.Log) (*LiquidStakingSetUTokensContract, error) {
	event := new(LiquidStakingSetUTokensContract)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUnstakeEpochIterator is returned from FilterSetUnstakeEpoch and is used to iterate over the raw logs and unpacked data for SetUnstakeEpoch events raised by the LiquidStaking contract.
type LiquidStakingSetUnstakeEpochIterator struct {
	Event *LiquidStakingSetUnstakeEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUnstakeEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUnstakeEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUnstakeEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUnstakeEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUnstakeEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUnstakeEpoch represents a SetUnstakeEpoch event raised by the LiquidStaking contract.
type LiquidStakingSetUnstakeEpoch struct {
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	EpochInterval        *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetUnstakeEpoch is a free log retrieval operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUnstakeEpoch(opts *bind.FilterOpts) (*LiquidStakingSetUnstakeEpochIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUnstakeEpoch")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUnstakeEpochIterator{contract: _LiquidStaking.contract, event: "SetUnstakeEpoch", logs: logs, sub: sub}, nil
}

// WatchSetUnstakeEpoch is a free log subscription operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUnstakeEpoch(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUnstakeEpoch) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUnstakeEpoch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUnstakeEpoch)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakeEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUnstakeEpoch is a log parse operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUnstakeEpoch(log types.Log) (*LiquidStakingSetUnstakeEpoch, error) {
	event := new(LiquidStakingSetUnstakeEpoch)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakeEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUnstakingLockTimeIterator is returned from FilterSetUnstakingLockTime and is used to iterate over the raw logs and unpacked data for SetUnstakingLockTime events raised by the LiquidStaking contract.
type LiquidStakingSetUnstakingLockTimeIterator struct {
	Event *LiquidStakingSetUnstakingLockTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUnstakingLockTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUnstakingLockTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUnstakingLockTime represents a SetUnstakingLockTime event raised by the LiquidStaking contract.
type LiquidStakingSetUnstakingLockTime struct {
	UnstakingLockTime *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSetUnstakingLockTime is a free log retrieval operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUnstakingLockTime(opts *bind.FilterOpts) (*LiquidStakingSetUnstakingLockTimeIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUnstakingLockTime")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUnstakingLockTimeIterator{contract: _LiquidStaking.contract, event: "SetUnstakingLockTime", logs: logs, sub: sub}, nil
}

// WatchSetUnstakingLockTime is a free log subscription operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUnstakingLockTime(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUnstakingLockTime) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUnstakingLockTime")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUnstakingLockTime)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakingLockTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUnstakingLockTime is a log parse operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUnstakingLockTime(log types.Log) (*LiquidStakingSetUnstakingLockTime, error) {
	event := new(LiquidStakingSetUnstakingLockTime)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakingLockTime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingStakeTokensIterator is returned from FilterStakeTokens and is used to iterate over the raw logs and unpacked data for StakeTokens events raised by the LiquidStaking contract.
type LiquidStakingStakeTokensIterator struct {
	Event *LiquidStakingStakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingStakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingStakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingStakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingStakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingStakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingStakeTokens represents a StakeTokens event raised by the LiquidStaking contract.
type LiquidStakingStakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterStakeTokens is a free log retrieval operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterStakeTokens(opts *bind.FilterOpts, accountAddress []common.Address) (*LiquidStakingStakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "StakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingStakeTokensIterator{contract: _LiquidStaking.contract, event: "StakeTokens", logs: logs, sub: sub}, nil
}

// WatchStakeTokens is a free log subscription operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchStakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingStakeTokens, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "StakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingStakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "StakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeTokens is a log parse operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseStakeTokens(log types.Log) (*LiquidStakingStakeTokens, error) {
	event := new(LiquidStakingStakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "StakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LiquidStaking contract.
type LiquidStakingUnpausedIterator struct {
	Event *LiquidStakingUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingUnpaused represents a Unpaused event raised by the LiquidStaking contract.
type LiquidStakingUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LiquidStakingUnpausedIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingUnpausedIterator{contract: _LiquidStaking.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LiquidStakingUnpaused) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingUnpaused)
				if err := _LiquidStaking.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) ParseUnpaused(log types.Log) (*LiquidStakingUnpaused, error) {
	event := new(LiquidStakingUnpaused)
	if err := _LiquidStaking.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingUnstakeTokensIterator is returned from FilterUnstakeTokens and is used to iterate over the raw logs and unpacked data for UnstakeTokens events raised by the LiquidStaking contract.
type LiquidStakingUnstakeTokensIterator struct {
	Event *LiquidStakingUnstakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingUnstakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingUnstakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingUnstakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingUnstakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingUnstakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingUnstakeTokens represents a UnstakeTokens event raised by the LiquidStaking contract.
type LiquidStakingUnstakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnstakeTokens is a free log retrieval operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterUnstakeTokens(opts *bind.FilterOpts, accountAddress []common.Address) (*LiquidStakingUnstakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "UnstakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingUnstakeTokensIterator{contract: _LiquidStaking.contract, event: "UnstakeTokens", logs: logs, sub: sub}, nil
}

// WatchUnstakeTokens is a free log subscription operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchUnstakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingUnstakeTokens, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "UnstakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingUnstakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "UnstakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeTokens is a log parse operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseUnstakeTokens(log types.Log) (*LiquidStakingUnstakeTokens, error) {
	event := new(LiquidStakingUnstakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "UnstakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingWithdrawUnstakeTokensIterator is returned from FilterWithdrawUnstakeTokens and is used to iterate over the raw logs and unpacked data for WithdrawUnstakeTokens events raised by the LiquidStaking contract.
type LiquidStakingWithdrawUnstakeTokensIterator struct {
	Event *LiquidStakingWithdrawUnstakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingWithdrawUnstakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingWithdrawUnstakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingWithdrawUnstakeTokens represents a WithdrawUnstakeTokens event raised by the LiquidStaking contract.
type LiquidStakingWithdrawUnstakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUnstakeTokens is a free log retrieval operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterWithdrawUnstakeTokens(opts *bind.FilterOpts, accountAddress []common.Address) (*LiquidStakingWithdrawUnstakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "WithdrawUnstakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingWithdrawUnstakeTokensIterator{contract: _LiquidStaking.contract, event: "WithdrawUnstakeTokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawUnstakeTokens is a free log subscription operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchWithdrawUnstakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingWithdrawUnstakeTokens, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "WithdrawUnstakeTokens", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingWithdrawUnstakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "WithdrawUnstakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUnstakeTokens is a log parse operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseWithdrawUnstakeTokens(log types.Log) (*LiquidStakingWithdrawUnstakeTokens, error) {
	event := new(LiquidStakingWithdrawUnstakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "WithdrawUnstakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
