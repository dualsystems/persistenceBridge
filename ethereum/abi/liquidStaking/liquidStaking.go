// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package liquidStaking

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LiquidStakingMetaData contains all meta data concerning the LiquidStaking contract.
var LiquidStakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchingLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetBatchingLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"}],\"name\":\"SetMinimumValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetSTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"}],\"name\":\"SetUnstakeEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"name\":\"SetUnstakingLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnstakeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnstakeTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_batchingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sTokens\",\"outputs\":[{\"internalType\":\"contractISTokensV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uTokens\",\"outputs\":[{\"internalType\":\"contractIUTokensV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_unstakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_unstakingExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_valueDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_withdrawCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchingLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeUnstakeProps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalUnbondedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unbondingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getTotalUnbondingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unbondingTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnstakeEpochMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeEpochMilestone\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchingLimit\",\"type\":\"uint256\"}],\"name\":\"setBatchingLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnstake\",\"type\":\"uint256\"}],\"name\":\"setMinimumValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sAddress\",\"type\":\"address\"}],\"name\":\"setSTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeEpochPrevious\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochInterval\",\"type\":\"uint256\"}],\"name\":\"setUnstakeEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakingLockTime\",\"type\":\"uint256\"}],\"name\":\"setUnstakingLockTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"withdrawUnstakedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061412a806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638456cb5911610130578063b17e3165116100b8578063d79cf55a1161007c578063d79cf55a14610ac8578063d939381414610afc578063e63ab1e914610b60578063f3e6f94e14610b7e578063f75f0cf614610be057610227565b8063b17e31651461097e578063b3deb34f146109d6578063bef1307c146109f4578063ca15c87314610a38578063d547741f14610a7a57610227565b806391d14854116100ff57806391d14854146107fe5780639b9eea46146108625780639dc77cab146108a4578063a217fddf146108fc578063adc9772e1461091a57610227565b80638456cb59146106d457806385e32840146106f4578063898a9664146107445780639010d07c1461079c57610227565b80633e118dbe116101b35780635c975abb116101825780635c975abb1461057c578063728a99ee1461059c578063728cdbca146105ba57806378a2f0741461065c578063819020a01461069057610227565b80633e118dbe1461049a5780633f4ba83a146104b857806351db00e7146104d857806355f2323f1461052657610227565b806321bdf9e5116101fa57806321bdf9e514610334578063248a9ca3146103785780632e31fab8146103ba5780632f2ff15d146103fe57806336568abe1461044c57610227565b80630273b70d1461022c5780630b78f9c0146102845780630e4b2943146102d257806316027ed014610316575b600080fd5b61026e6004803603602081101561024257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c42565b6040518082815260200191505060405180910390f35b6102ba6004803603604081101561029a57600080fd5b810190808035906020019092919080359060200190929190505050610dd4565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102e857600080fd5b8101908080359060200190929190505050610f64565b60405180821515815260200191505060405180910390f35b61031e611029565b6040518082815260200191505060405180910390f35b6103766004803603602081101561034a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061102f565b005b6103a46004803603602081101561038e57600080fd5b810190808035906020019092919050505061113c565b6040518082815260200191505060405180910390f35b6103fc600480360360208110156103d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061115c565b005b61044a6004803603604081101561041457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611269565b005b6104986004803603604081101561046257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f3565b005b6104a261138c565b6040518082815260200191505060405180910390f35b6104c0611392565b60405180821515815260200191505060405180910390f35b61050e600480360360408110156104ee57600080fd5b810190808035906020019092919080359060200190929190505050611446565b60405180821515815260200191505060405180910390f35b61052e611602565b604051808a8152602001898152602001888152602001878152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390f35b610584611648565b60405180821515815260200191505060405180910390f35b6105a461165f565b6040518082815260200191505060405180910390f35b61065a600480360360c08110156105d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611665565b005b6106646117f2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106d2600480360360208110156106a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611818565b005b6106dc611e27565b60405180821515815260200191505060405180910390f35b6107206004803603602081101561070a57600080fd5b8101908080359060200190929190505050611edb565b60405180848152602001838152602001828152602001935050505060405180910390f35b6107866004803603602081101561075a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f29565b6040518082815260200191505060405180910390f35b6107d2600480360360408110156107b257600080fd5b810190808035906020019092919080359060200190929190505050611f41565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61084a6004803603604081101561081457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f73565b60405180821515815260200191505060405180910390f35b61088e6004803603602081101561087857600080fd5b8101908080359060200190929190505050611fa5565b6040518082815260200191505060405180910390f35b6108e4600480360360608110156108ba57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190505050612071565b60405180821515815260200191505060405180910390f35b610904612242565b6040518082815260200191505060405180910390f35b6109666004803603604081101561093057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612249565b60405180821515815260200191505060405180910390f35b6109c06004803603602081101561099457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612766565b6040518082815260200191505060405180910390f35b6109de6128f9565b6040518082815260200191505060405180910390f35b610a2060048036036020811015610a0a57600080fd5b8101908080359060200190929190505050612903565b60405180821515815260200191505060405180910390f35b610a6460048036036020811015610a4e57600080fd5b81019080803590602001909291905050506129d3565b6040518082815260200191505060405180910390f35b610ac660048036036040811015610a9057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129fa565b005b610ad0612a84565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610b4860048036036040811015610b1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612aaa565b60405180821515815260200191505060405180910390f35b610b68612fc4565b6040518082815260200191505060405180910390f35b610bca60048036036040811015610b9457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612fe8565b6040518082815260200191505060405180910390f35b610c2c60048036036040811015610bf657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050613019565b6040518082815260200191505060405180910390f35b60008060a260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600060a460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008190505b82811015610dcc576000610d3b60a260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610d2b57fe5b9060005260206000200154611edb565b50509050804210610db057610dad60a360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610d9357fe5b90600052602060002001548661304a90919063ffffffff16565b94505b50610dc560018261304a90919063ffffffff16565b9050610cd4565b505050919050565b6000610dea6000801b610de56130d2565b611f73565b610e5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5131000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610e726064609d546130da90919063ffffffff16565b83111580610e805750600083145b8015610eac5750610e9d6064609d546130da90919063ffffffff16565b82111580610eab5750600082145b5b610f1e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5132000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82609b8190555081609c8190555081837f3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d153260405160405180910390a36001905092915050565b6000610f7a6000801b610f756130d2565b611f73565b610fec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5133000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b81609e81905550817ffced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb60405160405180910390a260019050919050565b60a65481565b6110436000801b61103e6130d2565b611f73565b6110b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131300000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c60405160405180910390a250565b600060656000838152602001908152602001600020600201549050919050565b6111706000801b61116b6130d2565b611f73565b6111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80609860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f60405160405180910390a250565b611290606560008481526020019081526020016000206002015461128b6130d2565b611f73565b6112e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180614018602f913960400191505060405180910390fd5b6112ef8282613160565b5050565b6112fb6130d2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806140c6602f913960400191505060405180910390fd5b61138882826131f4565b5050565b60a55481565b60006113c57f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6113c06130d2565b611f73565b611437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5132330000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b61143f613288565b6001905090565b600061145c6000801b6114576130d2565b611f73565b6114ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5134000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001831015611545576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5135000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60018210156115bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5136000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8260998190555081609a8190555081837fa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe360405160405180910390a36001905092915050565b6000806000806000806000806000609b549850609c54975060995496506099549550609d549450609f54935060a054925060a1549150609e549050909192939495969798565b6000603360009054906101000a900460ff16905090565b609d5481565b600060019054906101000a900460ff16806116845750611683613373565b5b8061169a575060008054906101000a900460ff16155b6116ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561173f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611747613384565b61174f613492565b6117636000801b61175e6130d2565b6135a0565b61178d7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a866135a0565b6117968761102f565b61179f8661115c565b6117a884610f64565b506117b4600180611446565b5081609d819055506117c7424285612071565b5080156117e95760008060016101000a81548160ff0219169083151502179055505b50505050505050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611820611648565b15611893576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b61189b6130d2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461193b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5132300000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008060a460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060a460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006119db8360a65461304a90919063ffffffff16565b60a260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011611a6b5760a260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611a81565b611a808360a65461304a90919063ffffffff16565b5b905060008390505b81811015611c47576000611af060a260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611ae057fe5b9060005260206000200154611edb565b50509050804210611c2b57611b6260a360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110611b4857fe5b90600052602060002001548761304a90919063ffffffff16565b955060a260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611bae57fe5b906000526020600020016000905560a360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611c0657fe5b9060005260206000200160009055611c2860018561304a90919063ffffffff16565b93505b50611c4060018261304a90919063ffffffff16565b9050611a89565b508160a460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008411611d02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5132310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b838573ffffffffffffffffffffffffffffffffffffffff167f31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b426040518082815260200191505060405180910390a3609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1986866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611de457600080fd5b505af1158015611df8573d6000803e3d6000fd5b505050506040513d6020811015611e0e57600080fd5b8101908080519060200190929190505050505050505050565b6000611e5a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611e556130d2565b611f73565b611ecc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5132320000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611ed46135ae565b6001905090565b600080600080611eea85611fa5565b90506000811415611eff576000935050611f22565b60a054925060a1549150611f1e609e548261304a90919063ffffffff16565b9350505b9193909250565b60a46020528060005260406000206000915090505481565b6000611f6b826065600086815260200190815260200160002060000161369a90919063ffffffff16565b905092915050565b6000611f9d82606560008681526020019081526020016000206000016136b490919063ffffffff16565b905092915050565b600080821415611fb8576000905061206c565b600060a054148015611fcc5750600060a154145b80611fd957506000609f54145b15611fe65781905061206c565b8160a0541115611ffa5760a054905061206c565b600061202561201660a15460a0546136e490919063ffffffff16565b8461304a90919063ffffffff16565b9050600061203e60a054836136e490919063ffffffff16565b905061206782612059609f548461376790919063ffffffff16565b61304a90919063ffffffff16565b925050505b919050565b60006120876000801b6120826130d2565b611f73565b6120f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5137000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8383111561216f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5138000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600084148015612180575060008214155b156121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f4c5139000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8360a0819055508260a18190555081609f819055508183857f342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c60405160405180910390a4600190509392505050565b6000801b81565b6000612253611648565b156122c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6122ce6130d2565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461236e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131320000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123f957600080fd5b505afa15801561240d573d6000803e3d6000fd5b505050506040513d602081101561242357600080fd5b8101908080519060200190929190505050905060006124646064612456609b54609d54886137f09092919063ffffffff16565b6138d090919063ffffffff16565b9050600061247b828661304a90919063ffffffff16565b90506099548510156124f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131330000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8083101561256b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131340000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80858773ffffffffffffffffffffffffffffffffffffffff167f5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42426040518082815260200191505060405180910390a4609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac87836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561264e57600080fd5b505af1158015612662573d6000803e3d6000fd5b505050506040513d602081101561267857600080fd5b810190808051906020019092919050505050609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1987876040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561271d57600080fd5b505af1158015612731573d6000803e3d6000fd5b505050506040513d602081101561274757600080fd5b8101908080519060200190929190505050506001935050505092915050565b60008060a260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600060a460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008190505b828110156128f157600061285f60a260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061284f57fe5b9060005260206000200154611edb565b50509050804210156128d5576128d260a360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481106128b857fe5b90600052602060002001548661304a90919063ffffffff16565b94505b506128ea60018261304a90919063ffffffff16565b90506127f8565b505050919050565b600060a654905090565b60006129196000801b6129146130d2565b611f73565b61298b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5132340000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8160a681905550817f3e0887a905af0c5764f2c25c201fa1b9595065cb7008f54fe7734fefdd8e88dc426040518082815260200191505060405180910390a260019050919050565b60006129f360656000848152602001908152602001600020600001613959565b9050919050565b612a216065600084815260200190815260200160002060020154612a1c6130d2565b611f73565b612a76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806140476030913960400191505060405180910390fd5b612a8082826131f4565b5050565b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612ab4611648565b15612b27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b612b2f6130d2565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612bcf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131350000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612c5a57600080fd5b505afa158015612c6e573d6000803e3d6000fd5b505050506040513d6020811015612c8457600080fd5b810190808051906020019092919050505090506000612cc56064612cb7609c54609d54886137f09092919063ffffffff16565b6138d090919063ffffffff16565b90506000612cdc828661304a90919063ffffffff16565b9050609a54851015612d56576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131380000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80831015612dcc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f4c5131390000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b609860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac87836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015612e5f57600080fd5b505af1158015612e73573d6000803e3d6000fd5b505050506040513d6020811015612e8957600080fd5b81019080805190602001909291905050505060a260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002042908060018154018082558091505060019003906000526020600020016000909190919091505560a360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002085908060018154018082558091505060019003906000526020600020016000909190919091505580858773ffffffffffffffffffffffffffffffffffffffff167f98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd426040518082815260200191505060405180910390a46001935050505092915050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60a2602052816000526040600020818154811061300457600080fd5b90600052602060002001600091509150505481565b60a3602052816000526040600020818154811061303557600080fd5b90600052602060002001600091509150505481565b6000808284019050838110156130c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600033905090565b6000808314156130ed576000905061315a565b60008284029050828482816130fe57fe5b0414613155576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806140a56021913960400191505060405180910390fd5b809150505b92915050565b613188816065600085815260200190815260200160002060000161396e90919063ffffffff16565b156131f0576131956130d2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61321c816065600085815260200190815260200160002060000161399e90919063ffffffff16565b15613284576132296130d2565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b613290611648565b613302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6133466130d2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600061337e306139ce565b15905090565b600060019054906101000a900460ff16806133a357506133a2613373565b5b806133b9575060008054906101000a900460ff16155b61340e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561345e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6134666139e1565b61346e613adf565b801561348f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806134b157506134b0613373565b5b806134c7575060008054906101000a900460ff16155b61351c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561356c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6135746139e1565b61357c613bdd565b801561359d5760008060016101000a81548160ff0219169083151502179055505b50565b6135aa8282613160565b5050565b6135b6611648565b15613629576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861366d6130d2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006136a98360000183613cf6565b60001c905092915050565b60006136dc836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613d79565b905092915050565b60008282111561375c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b60008082116137de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f536166654d6174683a206d6f64756c6f206279207a65726f000000000000000081525060200191505060405180910390fd5b8183816137e757fe5b06905092915050565b60008060006137ff8686613d9c565b915091506000848061380d57fe5b868809905082811115613821576001820391505b808303925060008214156138435784838161383857fe5b0493505050506138c9565b8482106138b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f5700000000000081525060200191505060405180910390fd5b6138c3838387613def565b93505050505b9392505050565b6000808211613947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161395057fe5b04905092915050565b600061396782600001613e8c565b9050919050565b6000613996836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613e9d565b905092915050565b60006139c6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613f0d565b905092915050565b600080823b905060008111915050919050565b600060019054906101000a900460ff1680613a0057506139ff613373565b5b80613a16575060008054906101000a900460ff16155b613a6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015613abb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015613adc5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680613afe5750613afd613373565b5b80613b14575060008054906101000a900460ff16155b613b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015613bb9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015613bda5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680613bfc5750613bfb613373565b5b80613c12575060008054906101000a900460ff16155b613c67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180614077602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015613cb7576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000603360006101000a81548160ff0219169083151502179055508015613cf35760008060016101000a81548160ff0219169083151502179055505b50565b600081836000018054905011613d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613ff66022913960400191505060405180910390fd5b826000018281548110613d6657fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80613dc957fe5b84860990508385029250828103915082811015613de7576001820391505b509250929050565b6000808260000383169050808381613e0357fe5b049250808581613e0f57fe5b0494506001818260000381613e2057fe5b04018402850194506000600190508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808602925050509392505050565b600081600001805490509050919050565b6000613ea98383613d79565b613f02578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613f07565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114613fe95760006001820390506000600186600001805490500390506000866000018281548110613f5857fe5b9060005260206000200154905080876000018481548110613f7557fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480613fad57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050613fef565b60009150505b9291505056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220185d2747cdbcb7855c7fdb3c978186abc2f85a558cc77659fc0347440be7f7e364736f6c63430007060033",
}

// LiquidStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use LiquidStakingMetaData.ABI instead.
var LiquidStakingABI = LiquidStakingMetaData.ABI

// LiquidStakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LiquidStakingMetaData.Bin instead.
var LiquidStakingBin = LiquidStakingMetaData.Bin

// DeployLiquidStaking deploys a new Ethereum contract, binding an instance of LiquidStaking to it.
func DeployLiquidStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *LiquidStaking, error) {
	parsed, err := LiquidStakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LiquidStakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &LiquidStaking{LiquidStakingCaller: LiquidStakingCaller{contract: contract}, LiquidStakingTransactor: LiquidStakingTransactor{contract: contract}, LiquidStakingFilterer: LiquidStakingFilterer{contract: contract}}, nil
}

// LiquidStaking is an auto generated Go binding around an Ethereum contract.
type LiquidStaking struct {
	LiquidStakingCaller     // Read-only binding to the contract
	LiquidStakingTransactor // Write-only binding to the contract
	LiquidStakingFilterer   // Log filterer for contract events
}

// LiquidStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquidStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquidStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquidStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquidStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquidStakingSession struct {
	Contract     *LiquidStaking    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquidStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquidStakingCallerSession struct {
	Contract *LiquidStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// LiquidStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquidStakingTransactorSession struct {
	Contract     *LiquidStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LiquidStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquidStakingRaw struct {
	Contract *LiquidStaking // Generic contract binding to access the raw methods on
}

// LiquidStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquidStakingCallerRaw struct {
	Contract *LiquidStakingCaller // Generic read-only contract binding to access the raw methods on
}

// LiquidStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquidStakingTransactorRaw struct {
	Contract *LiquidStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquidStaking creates a new instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStaking(address common.Address, backend bind.ContractBackend) (*LiquidStaking, error) {
	contract, err := bindLiquidStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LiquidStaking{LiquidStakingCaller: LiquidStakingCaller{contract: contract}, LiquidStakingTransactor: LiquidStakingTransactor{contract: contract}, LiquidStakingFilterer: LiquidStakingFilterer{contract: contract}}, nil
}

// NewLiquidStakingCaller creates a new read-only instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingCaller(address common.Address, caller bind.ContractCaller) (*LiquidStakingCaller, error) {
	contract, err := bindLiquidStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingCaller{contract: contract}, nil
}

// NewLiquidStakingTransactor creates a new write-only instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquidStakingTransactor, error) {
	contract, err := bindLiquidStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingTransactor{contract: contract}, nil
}

// NewLiquidStakingFilterer creates a new log filterer instance of LiquidStaking, bound to a specific deployed contract.
func NewLiquidStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquidStakingFilterer, error) {
	contract, err := bindLiquidStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingFilterer{contract: contract}, nil
}

// bindLiquidStaking binds a generic wrapper to an already deployed contract.
func bindLiquidStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquidStakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStaking *LiquidStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStaking.Contract.LiquidStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStaking *LiquidStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.Contract.LiquidStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStaking *LiquidStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStaking.Contract.LiquidStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LiquidStaking *LiquidStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LiquidStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LiquidStaking *LiquidStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LiquidStaking *LiquidStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LiquidStaking.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.DEFAULTADMINROLE(&_LiquidStaking.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.DEFAULTADMINROLE(&_LiquidStaking.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) PAUSERROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.PAUSERROLE(&_LiquidStaking.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) PAUSERROLE() ([32]byte, error) {
	return _LiquidStaking.Contract.PAUSERROLE(&_LiquidStaking.CallOpts)
}

// BatchingLimit is a free data retrieval call binding the contract method 0x16027ed0.
//
// Solidity: function _batchingLimit() view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) BatchingLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_batchingLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BatchingLimit is a free data retrieval call binding the contract method 0x16027ed0.
//
// Solidity: function _batchingLimit() view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) BatchingLimit() (*big.Int, error) {
	return _LiquidStaking.Contract.BatchingLimit(&_LiquidStaking.CallOpts)
}

// BatchingLimit is a free data retrieval call binding the contract method 0x16027ed0.
//
// Solidity: function _batchingLimit() view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) BatchingLimit() (*big.Int, error) {
	return _LiquidStaking.Contract.BatchingLimit(&_LiquidStaking.CallOpts)
}

// STokens is a free data retrieval call binding the contract method 0xd79cf55a.
//
// Solidity: function _sTokens() view returns(address)
func (_LiquidStaking *LiquidStakingCaller) STokens(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_sTokens")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// STokens is a free data retrieval call binding the contract method 0xd79cf55a.
//
// Solidity: function _sTokens() view returns(address)
func (_LiquidStaking *LiquidStakingSession) STokens() (common.Address, error) {
	return _LiquidStaking.Contract.STokens(&_LiquidStaking.CallOpts)
}

// STokens is a free data retrieval call binding the contract method 0xd79cf55a.
//
// Solidity: function _sTokens() view returns(address)
func (_LiquidStaking *LiquidStakingCallerSession) STokens() (common.Address, error) {
	return _LiquidStaking.Contract.STokens(&_LiquidStaking.CallOpts)
}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_LiquidStaking *LiquidStakingCaller) UTokens(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_uTokens")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_LiquidStaking *LiquidStakingSession) UTokens() (common.Address, error) {
	return _LiquidStaking.Contract.UTokens(&_LiquidStaking.CallOpts)
}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_LiquidStaking *LiquidStakingCallerSession) UTokens() (common.Address, error) {
	return _LiquidStaking.Contract.UTokens(&_LiquidStaking.CallOpts)
}

// UnstakingAmount is a free data retrieval call binding the contract method 0xf75f0cf6.
//
// Solidity: function _unstakingAmount(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) UnstakingAmount(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_unstakingAmount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnstakingAmount is a free data retrieval call binding the contract method 0xf75f0cf6.
//
// Solidity: function _unstakingAmount(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) UnstakingAmount(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.UnstakingAmount(&_LiquidStaking.CallOpts, arg0, arg1)
}

// UnstakingAmount is a free data retrieval call binding the contract method 0xf75f0cf6.
//
// Solidity: function _unstakingAmount(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) UnstakingAmount(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.UnstakingAmount(&_LiquidStaking.CallOpts, arg0, arg1)
}

// UnstakingExpiration is a free data retrieval call binding the contract method 0xf3e6f94e.
//
// Solidity: function _unstakingExpiration(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) UnstakingExpiration(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_unstakingExpiration", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnstakingExpiration is a free data retrieval call binding the contract method 0xf3e6f94e.
//
// Solidity: function _unstakingExpiration(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) UnstakingExpiration(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.UnstakingExpiration(&_LiquidStaking.CallOpts, arg0, arg1)
}

// UnstakingExpiration is a free data retrieval call binding the contract method 0xf3e6f94e.
//
// Solidity: function _unstakingExpiration(address , uint256 ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) UnstakingExpiration(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.UnstakingExpiration(&_LiquidStaking.CallOpts, arg0, arg1)
}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) ValueDivisor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_valueDivisor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) ValueDivisor() (*big.Int, error) {
	return _LiquidStaking.Contract.ValueDivisor(&_LiquidStaking.CallOpts)
}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) ValueDivisor() (*big.Int, error) {
	return _LiquidStaking.Contract.ValueDivisor(&_LiquidStaking.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) Version() (*big.Int, error) {
	return _LiquidStaking.Contract.Version(&_LiquidStaking.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) Version() (*big.Int, error) {
	return _LiquidStaking.Contract.Version(&_LiquidStaking.CallOpts)
}

// WithdrawCounters is a free data retrieval call binding the contract method 0x898a9664.
//
// Solidity: function _withdrawCounters(address ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) WithdrawCounters(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "_withdrawCounters", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WithdrawCounters is a free data retrieval call binding the contract method 0x898a9664.
//
// Solidity: function _withdrawCounters(address ) view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) WithdrawCounters(arg0 common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.WithdrawCounters(&_LiquidStaking.CallOpts, arg0)
}

// WithdrawCounters is a free data retrieval call binding the contract method 0x898a9664.
//
// Solidity: function _withdrawCounters(address ) view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) WithdrawCounters(arg0 common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.WithdrawCounters(&_LiquidStaking.CallOpts, arg0)
}

// GetBatchingLimit is a free data retrieval call binding the contract method 0xb3deb34f.
//
// Solidity: function getBatchingLimit() view returns(uint256 batchingLimit)
func (_LiquidStaking *LiquidStakingCaller) GetBatchingLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getBatchingLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBatchingLimit is a free data retrieval call binding the contract method 0xb3deb34f.
//
// Solidity: function getBatchingLimit() view returns(uint256 batchingLimit)
func (_LiquidStaking *LiquidStakingSession) GetBatchingLimit() (*big.Int, error) {
	return _LiquidStaking.Contract.GetBatchingLimit(&_LiquidStaking.CallOpts)
}

// GetBatchingLimit is a free data retrieval call binding the contract method 0xb3deb34f.
//
// Solidity: function getBatchingLimit() view returns(uint256 batchingLimit)
func (_LiquidStaking *LiquidStakingCallerSession) GetBatchingLimit() (*big.Int, error) {
	return _LiquidStaking.Contract.GetBatchingLimit(&_LiquidStaking.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LiquidStaking.Contract.GetRoleAdmin(&_LiquidStaking.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _LiquidStaking.Contract.GetRoleAdmin(&_LiquidStaking.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LiquidStaking.Contract.GetRoleMember(&_LiquidStaking.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _LiquidStaking.Contract.GetRoleMember(&_LiquidStaking.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LiquidStaking.Contract.GetRoleMemberCount(&_LiquidStaking.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_LiquidStaking *LiquidStakingCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _LiquidStaking.Contract.GetRoleMemberCount(&_LiquidStaking.CallOpts, role)
}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingCaller) GetStakeUnstakeProps(opts *bind.CallOpts) (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getStakeUnstakeProps")

	outstruct := new(struct {
		StakeFee             *big.Int
		UnstakeFee           *big.Int
		MinStake             *big.Int
		MinUnstake           *big.Int
		ValueDivisor         *big.Int
		EpochInterval        *big.Int
		UnstakeEpoch         *big.Int
		UnstakeEpochPrevious *big.Int
		UnstakingLockTime    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StakeFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnstakeFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinStake = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinUnstake = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ValueDivisor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.EpochInterval = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpoch = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpochPrevious = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.UnstakingLockTime = *abi.ConvertType(out[8], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingSession) GetStakeUnstakeProps() (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	return _LiquidStaking.Contract.GetStakeUnstakeProps(&_LiquidStaking.CallOpts)
}

// GetStakeUnstakeProps is a free data retrieval call binding the contract method 0x55f2323f.
//
// Solidity: function getStakeUnstakeProps() view returns(uint256 stakeFee, uint256 unstakeFee, uint256 minStake, uint256 minUnstake, uint256 valueDivisor, uint256 epochInterval, uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 unstakingLockTime)
func (_LiquidStaking *LiquidStakingCallerSession) GetStakeUnstakeProps() (struct {
	StakeFee             *big.Int
	UnstakeFee           *big.Int
	MinStake             *big.Int
	MinUnstake           *big.Int
	ValueDivisor         *big.Int
	EpochInterval        *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	UnstakingLockTime    *big.Int
}, error) {
	return _LiquidStaking.Contract.GetStakeUnstakeProps(&_LiquidStaking.CallOpts)
}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCaller) GetTotalUnbondedTokens(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getTotalUnbondedTokens", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingSession) GetTotalUnbondedTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondedTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondedTokens is a free data retrieval call binding the contract method 0x0273b70d.
//
// Solidity: function getTotalUnbondedTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCallerSession) GetTotalUnbondedTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondedTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCaller) GetTotalUnbondingTokens(opts *bind.CallOpts, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getTotalUnbondingTokens", staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingSession) GetTotalUnbondingTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondingTokens(&_LiquidStaking.CallOpts, staker)
}

// GetTotalUnbondingTokens is a free data retrieval call binding the contract method 0xb17e3165.
//
// Solidity: function getTotalUnbondingTokens(address staker) view returns(uint256 unbondingTokens)
func (_LiquidStaking *LiquidStakingCallerSession) GetTotalUnbondingTokens(staker common.Address) (*big.Int, error) {
	return _LiquidStaking.Contract.GetTotalUnbondingTokens(&_LiquidStaking.CallOpts, staker)
}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingCaller) GetUnstakeEpochMilestone(opts *bind.CallOpts, _unstakeTimestamp *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getUnstakeEpochMilestone", _unstakeTimestamp)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingSession) GetUnstakeEpochMilestone(_unstakeTimestamp *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.GetUnstakeEpochMilestone(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeEpochMilestone is a free data retrieval call binding the contract method 0x9b9eea46.
//
// Solidity: function getUnstakeEpochMilestone(uint256 _unstakeTimestamp) view returns(uint256 unstakeEpochMilestone)
func (_LiquidStaking *LiquidStakingCallerSession) GetUnstakeEpochMilestone(_unstakeTimestamp *big.Int) (*big.Int, error) {
	return _LiquidStaking.Contract.GetUnstakeEpochMilestone(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingCaller) GetUnstakeTime(opts *bind.CallOpts, _unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "getUnstakeTime", _unstakeTimestamp)

	outstruct := new(struct {
		UnstakeTime          *big.Int
		UnstakeEpoch         *big.Int
		UnstakeEpochPrevious *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.UnstakeTime = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpoch = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnstakeEpochPrevious = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingSession) GetUnstakeTime(_unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	return _LiquidStaking.Contract.GetUnstakeTime(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// GetUnstakeTime is a free data retrieval call binding the contract method 0x85e32840.
//
// Solidity: function getUnstakeTime(uint256 _unstakeTimestamp) view returns(uint256 unstakeTime, uint256 unstakeEpoch, uint256 unstakeEpochPrevious)
func (_LiquidStaking *LiquidStakingCallerSession) GetUnstakeTime(_unstakeTimestamp *big.Int) (struct {
	UnstakeTime          *big.Int
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
}, error) {
	return _LiquidStaking.Contract.GetUnstakeTime(&_LiquidStaking.CallOpts, _unstakeTimestamp)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LiquidStaking.Contract.HasRole(&_LiquidStaking.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_LiquidStaking *LiquidStakingCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _LiquidStaking.Contract.HasRole(&_LiquidStaking.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _LiquidStaking.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingSession) Paused() (bool, error) {
	return _LiquidStaking.Contract.Paused(&_LiquidStaking.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_LiquidStaking *LiquidStakingCallerSession) Paused() (bool, error) {
	return _LiquidStaking.Contract.Paused(&_LiquidStaking.CallOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.GrantRole(&_LiquidStaking.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.GrantRole(&_LiquidStaking.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingTransactor) Initialize(opts *bind.TransactOpts, uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "initialize", uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingSession) Initialize(uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Initialize(&_LiquidStaking.TransactOpts, uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0x728cdbca.
//
// Solidity: function initialize(address uAddress, address sAddress, address pauserAddress, uint256 unstakingLockTime, uint256 epochInterval, uint256 valueDivisor) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) Initialize(uAddress common.Address, sAddress common.Address, pauserAddress common.Address, unstakingLockTime *big.Int, epochInterval *big.Int, valueDivisor *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Initialize(&_LiquidStaking.TransactOpts, uAddress, sAddress, pauserAddress, unstakingLockTime, epochInterval, valueDivisor)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingSession) Pause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Pause(&_LiquidStaking.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) Pause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Pause(&_LiquidStaking.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RenounceRole(&_LiquidStaking.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RenounceRole(&_LiquidStaking.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RevokeRole(&_LiquidStaking.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.RevokeRole(&_LiquidStaking.TransactOpts, role, account)
}

// SetBatchingLimit is a paid mutator transaction binding the contract method 0xbef1307c.
//
// Solidity: function setBatchingLimit(uint256 batchingLimit) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetBatchingLimit(opts *bind.TransactOpts, batchingLimit *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setBatchingLimit", batchingLimit)
}

// SetBatchingLimit is a paid mutator transaction binding the contract method 0xbef1307c.
//
// Solidity: function setBatchingLimit(uint256 batchingLimit) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetBatchingLimit(batchingLimit *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetBatchingLimit(&_LiquidStaking.TransactOpts, batchingLimit)
}

// SetBatchingLimit is a paid mutator transaction binding the contract method 0xbef1307c.
//
// Solidity: function setBatchingLimit(uint256 batchingLimit) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetBatchingLimit(batchingLimit *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetBatchingLimit(&_LiquidStaking.TransactOpts, batchingLimit)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetFees(opts *bind.TransactOpts, stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setFees", stakeFee, unstakeFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetFees(stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetFees(&_LiquidStaking.TransactOpts, stakeFee, unstakeFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 stakeFee, uint256 unstakeFee) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetFees(stakeFee *big.Int, unstakeFee *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetFees(&_LiquidStaking.TransactOpts, stakeFee, unstakeFee)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetMinimumValues(opts *bind.TransactOpts, minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setMinimumValues", minStake, minUnstake)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetMinimumValues(minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetMinimumValues(&_LiquidStaking.TransactOpts, minStake, minUnstake)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minStake, uint256 minUnstake) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetMinimumValues(minStake *big.Int, minUnstake *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetMinimumValues(&_LiquidStaking.TransactOpts, minStake, minUnstake)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingTransactor) SetSTokensContract(opts *bind.TransactOpts, sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setSTokensContract", sAddress)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingSession) SetSTokensContract(sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetSTokensContract(&_LiquidStaking.TransactOpts, sAddress)
}

// SetSTokensContract is a paid mutator transaction binding the contract method 0x2e31fab8.
//
// Solidity: function setSTokensContract(address sAddress) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) SetSTokensContract(sAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetSTokensContract(&_LiquidStaking.TransactOpts, sAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingTransactor) SetUTokensContract(opts *bind.TransactOpts, uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUTokensContract", uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUTokensContract(&_LiquidStaking.TransactOpts, uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUTokensContract(&_LiquidStaking.TransactOpts, uAddress)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetUnstakeEpoch(opts *bind.TransactOpts, unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUnstakeEpoch", unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetUnstakeEpoch(unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakeEpoch(&_LiquidStaking.TransactOpts, unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakeEpoch is a paid mutator transaction binding the contract method 0x9dc77cab.
//
// Solidity: function setUnstakeEpoch(uint256 unstakeEpoch, uint256 unstakeEpochPrevious, uint256 epochInterval) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetUnstakeEpoch(unstakeEpoch *big.Int, unstakeEpochPrevious *big.Int, epochInterval *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakeEpoch(&_LiquidStaking.TransactOpts, unstakeEpoch, unstakeEpochPrevious, epochInterval)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) SetUnstakingLockTime(opts *bind.TransactOpts, unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "setUnstakingLockTime", unstakingLockTime)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingSession) SetUnstakingLockTime(unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakingLockTime(&_LiquidStaking.TransactOpts, unstakingLockTime)
}

// SetUnstakingLockTime is a paid mutator transaction binding the contract method 0x0e4b2943.
//
// Solidity: function setUnstakingLockTime(uint256 unstakingLockTime) returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) SetUnstakingLockTime(unstakingLockTime *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.SetUnstakingLockTime(&_LiquidStaking.TransactOpts, unstakingLockTime)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactor) Stake(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "stake", to, amount)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingSession) Stake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Stake(&_LiquidStaking.TransactOpts, to, amount)
}

// Stake is a paid mutator transaction binding the contract method 0xadc9772e.
//
// Solidity: function stake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactorSession) Stake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.Stake(&_LiquidStaking.TransactOpts, to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactor) UnStake(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "unStake", to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingSession) UnStake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.UnStake(&_LiquidStaking.TransactOpts, to, amount)
}

// UnStake is a paid mutator transaction binding the contract method 0xd9393814.
//
// Solidity: function unStake(address to, uint256 amount) returns(bool)
func (_LiquidStaking *LiquidStakingTransactorSession) UnStake(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _LiquidStaking.Contract.UnStake(&_LiquidStaking.TransactOpts, to, amount)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingSession) Unpause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Unpause(&_LiquidStaking.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_LiquidStaking *LiquidStakingTransactorSession) Unpause() (*types.Transaction, error) {
	return _LiquidStaking.Contract.Unpause(&_LiquidStaking.TransactOpts)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingTransactor) WithdrawUnstakedTokens(opts *bind.TransactOpts, staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.contract.Transact(opts, "withdrawUnstakedTokens", staker)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingSession) WithdrawUnstakedTokens(staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.WithdrawUnstakedTokens(&_LiquidStaking.TransactOpts, staker)
}

// WithdrawUnstakedTokens is a paid mutator transaction binding the contract method 0x819020a0.
//
// Solidity: function withdrawUnstakedTokens(address staker) returns()
func (_LiquidStaking *LiquidStakingTransactorSession) WithdrawUnstakedTokens(staker common.Address) (*types.Transaction, error) {
	return _LiquidStaking.Contract.WithdrawUnstakedTokens(&_LiquidStaking.TransactOpts, staker)
}

// LiquidStakingPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the LiquidStaking contract.
type LiquidStakingPausedIterator struct {
	Event *LiquidStakingPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingPaused represents a Paused event raised by the LiquidStaking contract.
type LiquidStakingPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) FilterPaused(opts *bind.FilterOpts) (*LiquidStakingPausedIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingPausedIterator{contract: _LiquidStaking.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *LiquidStakingPaused) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingPaused)
				if err := _LiquidStaking.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_LiquidStaking *LiquidStakingFilterer) ParsePaused(log types.Log) (*LiquidStakingPaused, error) {
	event := new(LiquidStakingPaused)
	if err := _LiquidStaking.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the LiquidStaking contract.
type LiquidStakingRoleAdminChangedIterator struct {
	Event *LiquidStakingRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleAdminChanged represents a RoleAdminChanged event raised by the LiquidStaking contract.
type LiquidStakingRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*LiquidStakingRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleAdminChangedIterator{contract: _LiquidStaking.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleAdminChanged)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleAdminChanged(log types.Log) (*LiquidStakingRoleAdminChanged, error) {
	event := new(LiquidStakingRoleAdminChanged)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the LiquidStaking contract.
type LiquidStakingRoleGrantedIterator struct {
	Event *LiquidStakingRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleGranted represents a RoleGranted event raised by the LiquidStaking contract.
type LiquidStakingRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LiquidStakingRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleGrantedIterator{contract: _LiquidStaking.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleGranted)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleGranted(log types.Log) (*LiquidStakingRoleGranted, error) {
	event := new(LiquidStakingRoleGranted)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the LiquidStaking contract.
type LiquidStakingRoleRevokedIterator struct {
	Event *LiquidStakingRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingRoleRevoked represents a RoleRevoked event raised by the LiquidStaking contract.
type LiquidStakingRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*LiquidStakingRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingRoleRevokedIterator{contract: _LiquidStaking.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *LiquidStakingRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingRoleRevoked)
				if err := _LiquidStaking.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_LiquidStaking *LiquidStakingFilterer) ParseRoleRevoked(log types.Log) (*LiquidStakingRoleRevoked, error) {
	event := new(LiquidStakingRoleRevoked)
	if err := _LiquidStaking.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetBatchingLimitIterator is returned from FilterSetBatchingLimit and is used to iterate over the raw logs and unpacked data for SetBatchingLimit events raised by the LiquidStaking contract.
type LiquidStakingSetBatchingLimitIterator struct {
	Event *LiquidStakingSetBatchingLimit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetBatchingLimitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetBatchingLimit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetBatchingLimit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetBatchingLimitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetBatchingLimitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetBatchingLimit represents a SetBatchingLimit event raised by the LiquidStaking contract.
type LiquidStakingSetBatchingLimit struct {
	BatchingLimit *big.Int
	Timestamp     *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetBatchingLimit is a free log retrieval operation binding the contract event 0x3e0887a905af0c5764f2c25c201fa1b9595065cb7008f54fe7734fefdd8e88dc.
//
// Solidity: event SetBatchingLimit(uint256 indexed batchingLimit, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetBatchingLimit(opts *bind.FilterOpts, batchingLimit []*big.Int) (*LiquidStakingSetBatchingLimitIterator, error) {

	var batchingLimitRule []interface{}
	for _, batchingLimitItem := range batchingLimit {
		batchingLimitRule = append(batchingLimitRule, batchingLimitItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetBatchingLimit", batchingLimitRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetBatchingLimitIterator{contract: _LiquidStaking.contract, event: "SetBatchingLimit", logs: logs, sub: sub}, nil
}

// WatchSetBatchingLimit is a free log subscription operation binding the contract event 0x3e0887a905af0c5764f2c25c201fa1b9595065cb7008f54fe7734fefdd8e88dc.
//
// Solidity: event SetBatchingLimit(uint256 indexed batchingLimit, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetBatchingLimit(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetBatchingLimit, batchingLimit []*big.Int) (event.Subscription, error) {

	var batchingLimitRule []interface{}
	for _, batchingLimitItem := range batchingLimit {
		batchingLimitRule = append(batchingLimitRule, batchingLimitItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetBatchingLimit", batchingLimitRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetBatchingLimit)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetBatchingLimit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetBatchingLimit is a log parse operation binding the contract event 0x3e0887a905af0c5764f2c25c201fa1b9595065cb7008f54fe7734fefdd8e88dc.
//
// Solidity: event SetBatchingLimit(uint256 indexed batchingLimit, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetBatchingLimit(log types.Log) (*LiquidStakingSetBatchingLimit, error) {
	event := new(LiquidStakingSetBatchingLimit)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetBatchingLimit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetFeesIterator is returned from FilterSetFees and is used to iterate over the raw logs and unpacked data for SetFees events raised by the LiquidStaking contract.
type LiquidStakingSetFeesIterator struct {
	Event *LiquidStakingSetFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetFees represents a SetFees event raised by the LiquidStaking contract.
type LiquidStakingSetFees struct {
	StakeFee   *big.Int
	UnstakeFee *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetFees is a free log retrieval operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed stakeFee, uint256 indexed unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetFees(opts *bind.FilterOpts, stakeFee []*big.Int, unstakeFee []*big.Int) (*LiquidStakingSetFeesIterator, error) {

	var stakeFeeRule []interface{}
	for _, stakeFeeItem := range stakeFee {
		stakeFeeRule = append(stakeFeeRule, stakeFeeItem)
	}
	var unstakeFeeRule []interface{}
	for _, unstakeFeeItem := range unstakeFee {
		unstakeFeeRule = append(unstakeFeeRule, unstakeFeeItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetFees", stakeFeeRule, unstakeFeeRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetFeesIterator{contract: _LiquidStaking.contract, event: "SetFees", logs: logs, sub: sub}, nil
}

// WatchSetFees is a free log subscription operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed stakeFee, uint256 indexed unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetFees(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetFees, stakeFee []*big.Int, unstakeFee []*big.Int) (event.Subscription, error) {

	var stakeFeeRule []interface{}
	for _, stakeFeeItem := range stakeFee {
		stakeFeeRule = append(stakeFeeRule, stakeFeeItem)
	}
	var unstakeFeeRule []interface{}
	for _, unstakeFeeItem := range unstakeFee {
		unstakeFeeRule = append(unstakeFeeRule, unstakeFeeItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetFees", stakeFeeRule, unstakeFeeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetFees)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFees is a log parse operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed stakeFee, uint256 indexed unstakeFee)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetFees(log types.Log) (*LiquidStakingSetFees, error) {
	event := new(LiquidStakingSetFees)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetMinimumValuesIterator is returned from FilterSetMinimumValues and is used to iterate over the raw logs and unpacked data for SetMinimumValues events raised by the LiquidStaking contract.
type LiquidStakingSetMinimumValuesIterator struct {
	Event *LiquidStakingSetMinimumValues // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetMinimumValuesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetMinimumValues)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetMinimumValues)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetMinimumValuesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetMinimumValuesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetMinimumValues represents a SetMinimumValues event raised by the LiquidStaking contract.
type LiquidStakingSetMinimumValues struct {
	MinStake   *big.Int
	MinUnstake *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSetMinimumValues is a free log retrieval operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minStake, uint256 indexed minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetMinimumValues(opts *bind.FilterOpts, minStake []*big.Int, minUnstake []*big.Int) (*LiquidStakingSetMinimumValuesIterator, error) {

	var minStakeRule []interface{}
	for _, minStakeItem := range minStake {
		minStakeRule = append(minStakeRule, minStakeItem)
	}
	var minUnstakeRule []interface{}
	for _, minUnstakeItem := range minUnstake {
		minUnstakeRule = append(minUnstakeRule, minUnstakeItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetMinimumValues", minStakeRule, minUnstakeRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetMinimumValuesIterator{contract: _LiquidStaking.contract, event: "SetMinimumValues", logs: logs, sub: sub}, nil
}

// WatchSetMinimumValues is a free log subscription operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minStake, uint256 indexed minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetMinimumValues(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetMinimumValues, minStake []*big.Int, minUnstake []*big.Int) (event.Subscription, error) {

	var minStakeRule []interface{}
	for _, minStakeItem := range minStake {
		minStakeRule = append(minStakeRule, minStakeItem)
	}
	var minUnstakeRule []interface{}
	for _, minUnstakeItem := range minUnstake {
		minUnstakeRule = append(minUnstakeRule, minUnstakeItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetMinimumValues", minStakeRule, minUnstakeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetMinimumValues)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinimumValues is a log parse operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minStake, uint256 indexed minUnstake)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetMinimumValues(log types.Log) (*LiquidStakingSetMinimumValues, error) {
	event := new(LiquidStakingSetMinimumValues)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetSTokensContractIterator is returned from FilterSetSTokensContract and is used to iterate over the raw logs and unpacked data for SetSTokensContract events raised by the LiquidStaking contract.
type LiquidStakingSetSTokensContractIterator struct {
	Event *LiquidStakingSetSTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetSTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetSTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetSTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetSTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetSTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetSTokensContract represents a SetSTokensContract event raised by the LiquidStaking contract.
type LiquidStakingSetSTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetSTokensContract is a free log retrieval operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetSTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*LiquidStakingSetSTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetSTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetSTokensContractIterator{contract: _LiquidStaking.contract, event: "SetSTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetSTokensContract is a free log subscription operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetSTokensContract(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetSTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetSTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetSTokensContract)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetSTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSTokensContract is a log parse operation binding the contract event 0xd0b9dbe26f676f4cdb02fc249c203baa0314cec79e18b4194dc862795a5de03f.
//
// Solidity: event SetSTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetSTokensContract(log types.Log) (*LiquidStakingSetSTokensContract, error) {
	event := new(LiquidStakingSetSTokensContract)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetSTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the LiquidStaking contract.
type LiquidStakingSetUTokensContractIterator struct {
	Event *LiquidStakingSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUTokensContract represents a SetUTokensContract event raised by the LiquidStaking contract.
type LiquidStakingSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*LiquidStakingSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUTokensContractIterator{contract: _LiquidStaking.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUTokensContract)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUTokensContract(log types.Log) (*LiquidStakingSetUTokensContract, error) {
	event := new(LiquidStakingSetUTokensContract)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUnstakeEpochIterator is returned from FilterSetUnstakeEpoch and is used to iterate over the raw logs and unpacked data for SetUnstakeEpoch events raised by the LiquidStaking contract.
type LiquidStakingSetUnstakeEpochIterator struct {
	Event *LiquidStakingSetUnstakeEpoch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUnstakeEpochIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUnstakeEpoch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUnstakeEpoch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUnstakeEpochIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUnstakeEpochIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUnstakeEpoch represents a SetUnstakeEpoch event raised by the LiquidStaking contract.
type LiquidStakingSetUnstakeEpoch struct {
	UnstakeEpoch         *big.Int
	UnstakeEpochPrevious *big.Int
	EpochInterval        *big.Int
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterSetUnstakeEpoch is a free log retrieval operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 indexed unstakeEpoch, uint256 indexed unstakeEpochPrevious, uint256 indexed epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUnstakeEpoch(opts *bind.FilterOpts, unstakeEpoch []*big.Int, unstakeEpochPrevious []*big.Int, epochInterval []*big.Int) (*LiquidStakingSetUnstakeEpochIterator, error) {

	var unstakeEpochRule []interface{}
	for _, unstakeEpochItem := range unstakeEpoch {
		unstakeEpochRule = append(unstakeEpochRule, unstakeEpochItem)
	}
	var unstakeEpochPreviousRule []interface{}
	for _, unstakeEpochPreviousItem := range unstakeEpochPrevious {
		unstakeEpochPreviousRule = append(unstakeEpochPreviousRule, unstakeEpochPreviousItem)
	}
	var epochIntervalRule []interface{}
	for _, epochIntervalItem := range epochInterval {
		epochIntervalRule = append(epochIntervalRule, epochIntervalItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUnstakeEpoch", unstakeEpochRule, unstakeEpochPreviousRule, epochIntervalRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUnstakeEpochIterator{contract: _LiquidStaking.contract, event: "SetUnstakeEpoch", logs: logs, sub: sub}, nil
}

// WatchSetUnstakeEpoch is a free log subscription operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 indexed unstakeEpoch, uint256 indexed unstakeEpochPrevious, uint256 indexed epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUnstakeEpoch(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUnstakeEpoch, unstakeEpoch []*big.Int, unstakeEpochPrevious []*big.Int, epochInterval []*big.Int) (event.Subscription, error) {

	var unstakeEpochRule []interface{}
	for _, unstakeEpochItem := range unstakeEpoch {
		unstakeEpochRule = append(unstakeEpochRule, unstakeEpochItem)
	}
	var unstakeEpochPreviousRule []interface{}
	for _, unstakeEpochPreviousItem := range unstakeEpochPrevious {
		unstakeEpochPreviousRule = append(unstakeEpochPreviousRule, unstakeEpochPreviousItem)
	}
	var epochIntervalRule []interface{}
	for _, epochIntervalItem := range epochInterval {
		epochIntervalRule = append(epochIntervalRule, epochIntervalItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUnstakeEpoch", unstakeEpochRule, unstakeEpochPreviousRule, epochIntervalRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUnstakeEpoch)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakeEpoch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUnstakeEpoch is a log parse operation binding the contract event 0x342db083975cc0697d0f81d0876299ecbf95d909e920426089062e540904497c.
//
// Solidity: event SetUnstakeEpoch(uint256 indexed unstakeEpoch, uint256 indexed unstakeEpochPrevious, uint256 indexed epochInterval)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUnstakeEpoch(log types.Log) (*LiquidStakingSetUnstakeEpoch, error) {
	event := new(LiquidStakingSetUnstakeEpoch)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakeEpoch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingSetUnstakingLockTimeIterator is returned from FilterSetUnstakingLockTime and is used to iterate over the raw logs and unpacked data for SetUnstakingLockTime events raised by the LiquidStaking contract.
type LiquidStakingSetUnstakingLockTimeIterator struct {
	Event *LiquidStakingSetUnstakingLockTime // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingSetUnstakingLockTime)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingSetUnstakingLockTime)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingSetUnstakingLockTimeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingSetUnstakingLockTime represents a SetUnstakingLockTime event raised by the LiquidStaking contract.
type LiquidStakingSetUnstakingLockTime struct {
	UnstakingLockTime *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterSetUnstakingLockTime is a free log retrieval operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 indexed unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) FilterSetUnstakingLockTime(opts *bind.FilterOpts, unstakingLockTime []*big.Int) (*LiquidStakingSetUnstakingLockTimeIterator, error) {

	var unstakingLockTimeRule []interface{}
	for _, unstakingLockTimeItem := range unstakingLockTime {
		unstakingLockTimeRule = append(unstakingLockTimeRule, unstakingLockTimeItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "SetUnstakingLockTime", unstakingLockTimeRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingSetUnstakingLockTimeIterator{contract: _LiquidStaking.contract, event: "SetUnstakingLockTime", logs: logs, sub: sub}, nil
}

// WatchSetUnstakingLockTime is a free log subscription operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 indexed unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) WatchSetUnstakingLockTime(opts *bind.WatchOpts, sink chan<- *LiquidStakingSetUnstakingLockTime, unstakingLockTime []*big.Int) (event.Subscription, error) {

	var unstakingLockTimeRule []interface{}
	for _, unstakingLockTimeItem := range unstakingLockTime {
		unstakingLockTimeRule = append(unstakingLockTimeRule, unstakingLockTimeItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "SetUnstakingLockTime", unstakingLockTimeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingSetUnstakingLockTime)
				if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakingLockTime", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUnstakingLockTime is a log parse operation binding the contract event 0xfced4450741ad45114dbc966176eb1d16dc4f2259bc864aa395736a7e8355bbb.
//
// Solidity: event SetUnstakingLockTime(uint256 indexed unstakingLockTime)
func (_LiquidStaking *LiquidStakingFilterer) ParseSetUnstakingLockTime(log types.Log) (*LiquidStakingSetUnstakingLockTime, error) {
	event := new(LiquidStakingSetUnstakingLockTime)
	if err := _LiquidStaking.contract.UnpackLog(event, "SetUnstakingLockTime", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingStakeTokensIterator is returned from FilterStakeTokens and is used to iterate over the raw logs and unpacked data for StakeTokens events raised by the LiquidStaking contract.
type LiquidStakingStakeTokensIterator struct {
	Event *LiquidStakingStakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingStakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingStakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingStakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingStakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingStakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingStakeTokens represents a StakeTokens event raised by the LiquidStaking contract.
type LiquidStakingStakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterStakeTokens is a free log retrieval operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterStakeTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (*LiquidStakingStakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "StakeTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingStakeTokensIterator{contract: _LiquidStaking.contract, event: "StakeTokens", logs: logs, sub: sub}, nil
}

// WatchStakeTokens is a free log subscription operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchStakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingStakeTokens, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "StakeTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingStakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "StakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeTokens is a log parse operation binding the contract event 0x5fe79871cd2431c06447cbcf2557091da5d2ed5bc640f1028f42665913786e42.
//
// Solidity: event StakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseStakeTokens(log types.Log) (*LiquidStakingStakeTokens, error) {
	event := new(LiquidStakingStakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "StakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the LiquidStaking contract.
type LiquidStakingUnpausedIterator struct {
	Event *LiquidStakingUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingUnpaused represents a Unpaused event raised by the LiquidStaking contract.
type LiquidStakingUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) FilterUnpaused(opts *bind.FilterOpts) (*LiquidStakingUnpausedIterator, error) {

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &LiquidStakingUnpausedIterator{contract: _LiquidStaking.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *LiquidStakingUnpaused) (event.Subscription, error) {

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingUnpaused)
				if err := _LiquidStaking.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_LiquidStaking *LiquidStakingFilterer) ParseUnpaused(log types.Log) (*LiquidStakingUnpaused, error) {
	event := new(LiquidStakingUnpaused)
	if err := _LiquidStaking.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingUnstakeTokensIterator is returned from FilterUnstakeTokens and is used to iterate over the raw logs and unpacked data for UnstakeTokens events raised by the LiquidStaking contract.
type LiquidStakingUnstakeTokensIterator struct {
	Event *LiquidStakingUnstakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingUnstakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingUnstakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingUnstakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingUnstakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingUnstakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingUnstakeTokens represents a UnstakeTokens event raised by the LiquidStaking contract.
type LiquidStakingUnstakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnstakeTokens is a free log retrieval operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterUnstakeTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (*LiquidStakingUnstakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "UnstakeTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingUnstakeTokensIterator{contract: _LiquidStaking.contract, event: "UnstakeTokens", logs: logs, sub: sub}, nil
}

// WatchUnstakeTokens is a free log subscription operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchUnstakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingUnstakeTokens, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "UnstakeTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingUnstakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "UnstakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeTokens is a log parse operation binding the contract event 0x98850af53deeaf736beb3ea22091c900e8e5cfdf8153342daa366dc1d83a39fd.
//
// Solidity: event UnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseUnstakeTokens(log types.Log) (*LiquidStakingUnstakeTokens, error) {
	event := new(LiquidStakingUnstakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "UnstakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquidStakingWithdrawUnstakeTokensIterator is returned from FilterWithdrawUnstakeTokens and is used to iterate over the raw logs and unpacked data for WithdrawUnstakeTokens events raised by the LiquidStaking contract.
type LiquidStakingWithdrawUnstakeTokensIterator struct {
	Event *LiquidStakingWithdrawUnstakeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquidStakingWithdrawUnstakeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquidStakingWithdrawUnstakeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquidStakingWithdrawUnstakeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquidStakingWithdrawUnstakeTokens represents a WithdrawUnstakeTokens event raised by the LiquidStaking contract.
type LiquidStakingWithdrawUnstakeTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUnstakeTokens is a free log retrieval operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) FilterWithdrawUnstakeTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int) (*LiquidStakingWithdrawUnstakeTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.FilterLogs(opts, "WithdrawUnstakeTokens", accountAddressRule, tokensRule)
	if err != nil {
		return nil, err
	}
	return &LiquidStakingWithdrawUnstakeTokensIterator{contract: _LiquidStaking.contract, event: "WithdrawUnstakeTokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawUnstakeTokens is a free log subscription operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) WatchWithdrawUnstakeTokens(opts *bind.WatchOpts, sink chan<- *LiquidStakingWithdrawUnstakeTokens, accountAddress []common.Address, tokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	logs, sub, err := _LiquidStaking.contract.WatchLogs(opts, "WithdrawUnstakeTokens", accountAddressRule, tokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquidStakingWithdrawUnstakeTokens)
				if err := _LiquidStaking.contract.UnpackLog(event, "WithdrawUnstakeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUnstakeTokens is a log parse operation binding the contract event 0x31453b59c0eb931edc765cc2400876a524254457b5534d660c9da1d74ab4666b.
//
// Solidity: event WithdrawUnstakeTokens(address indexed accountAddress, uint256 indexed tokens, uint256 timestamp)
func (_LiquidStaking *LiquidStakingFilterer) ParseWithdrawUnstakeTokens(log types.Log) (*LiquidStakingWithdrawUnstakeTokens, error) {
	event := new(LiquidStakingWithdrawUnstakeTokens)
	if err := _LiquidStaking.contract.UnpackLog(event, "WithdrawUnstakeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
