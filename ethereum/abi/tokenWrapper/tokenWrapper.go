// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenWrapper

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TokenWrapperMetaData contains all meta data concerning the TokenWrapper contract.
var TokenWrapperMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateUTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accountAddress\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"finalTokens\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateUTokensInBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"SetMinimumValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUTokensV2\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uTokens\",\"outputs\":[{\"internalType\":\"contractIUTokensV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_valueDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controlDigitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataBytesSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generateUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"generateUTokensInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hrpBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"}],\"name\":\"isBech32Valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAddressValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinimumValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"}],\"name\":\"withdrawUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// TokenWrapperABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenWrapperMetaData.ABI instead.
var TokenWrapperABI = TokenWrapperMetaData.ABI

// TokenWrapperBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenWrapperMetaData.Bin instead.
var TokenWrapperBin = TokenWrapperMetaData.Bin

// DeployTokenWrapper deploys a new Ethereum contract, binding an instance of TokenWrapper to it.
func DeployTokenWrapper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenWrapper, error) {
	parsed, err := TokenWrapperMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenWrapperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenWrapper{TokenWrapperCaller: TokenWrapperCaller{contract: contract}, TokenWrapperTransactor: TokenWrapperTransactor{contract: contract}, TokenWrapperFilterer: TokenWrapperFilterer{contract: contract}}, nil
}

// TokenWrapper is an auto generated Go binding around an Ethereum contract.
type TokenWrapper struct {
	TokenWrapperCaller     // Read-only binding to the contract
	TokenWrapperTransactor // Write-only binding to the contract
	TokenWrapperFilterer   // Log filterer for contract events
}

// TokenWrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenWrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenWrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenWrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenWrapperSession struct {
	Contract     *TokenWrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenWrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenWrapperCallerSession struct {
	Contract *TokenWrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TokenWrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenWrapperTransactorSession struct {
	Contract     *TokenWrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenWrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenWrapperRaw struct {
	Contract *TokenWrapper // Generic contract binding to access the raw methods on
}

// TokenWrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenWrapperCallerRaw struct {
	Contract *TokenWrapperCaller // Generic read-only contract binding to access the raw methods on
}

// TokenWrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenWrapperTransactorRaw struct {
	Contract *TokenWrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenWrapper creates a new instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapper(address common.Address, backend bind.ContractBackend) (*TokenWrapper, error) {
	contract, err := bindTokenWrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenWrapper{TokenWrapperCaller: TokenWrapperCaller{contract: contract}, TokenWrapperTransactor: TokenWrapperTransactor{contract: contract}, TokenWrapperFilterer: TokenWrapperFilterer{contract: contract}}, nil
}

// NewTokenWrapperCaller creates a new read-only instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperCaller(address common.Address, caller bind.ContractCaller) (*TokenWrapperCaller, error) {
	contract, err := bindTokenWrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperCaller{contract: contract}, nil
}

// NewTokenWrapperTransactor creates a new write-only instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenWrapperTransactor, error) {
	contract, err := bindTokenWrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperTransactor{contract: contract}, nil
}

// NewTokenWrapperFilterer creates a new log filterer instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenWrapperFilterer, error) {
	contract, err := bindTokenWrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperFilterer{contract: contract}, nil
}

// bindTokenWrapper binds a generic wrapper to an already deployed contract.
func bindTokenWrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenWrapperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenWrapper *TokenWrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenWrapper.Contract.TokenWrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenWrapper *TokenWrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.Contract.TokenWrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenWrapper *TokenWrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenWrapper.Contract.TokenWrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenWrapper *TokenWrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenWrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenWrapper *TokenWrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenWrapper *TokenWrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenWrapper.Contract.contract.Transact(opts, method, params...)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) BRIDGEADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "BRIDGE_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.BRIDGEADMINROLE(&_TokenWrapper.CallOpts)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.BRIDGEADMINROLE(&_TokenWrapper.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.DEFAULTADMINROLE(&_TokenWrapper.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.DEFAULTADMINROLE(&_TokenWrapper.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) PAUSERROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.PAUSERROLE(&_TokenWrapper.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) PAUSERROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.PAUSERROLE(&_TokenWrapper.CallOpts)
}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_TokenWrapper *TokenWrapperCaller) UTokens(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "_uTokens")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_TokenWrapper *TokenWrapperSession) UTokens() (common.Address, error) {
	return _TokenWrapper.Contract.UTokens(&_TokenWrapper.CallOpts)
}

// UTokens is a free data retrieval call binding the contract method 0x78a2f074.
//
// Solidity: function _uTokens() view returns(address)
func (_TokenWrapper *TokenWrapperCallerSession) UTokens() (common.Address, error) {
	return _TokenWrapper.Contract.UTokens(&_TokenWrapper.CallOpts)
}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_TokenWrapper *TokenWrapperCaller) ValueDivisor(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "_valueDivisor")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_TokenWrapper *TokenWrapperSession) ValueDivisor() (*big.Int, error) {
	return _TokenWrapper.Contract.ValueDivisor(&_TokenWrapper.CallOpts)
}

// ValueDivisor is a free data retrieval call binding the contract method 0x728a99ee.
//
// Solidity: function _valueDivisor() view returns(uint256)
func (_TokenWrapper *TokenWrapperCallerSession) ValueDivisor() (*big.Int, error) {
	return _TokenWrapper.Contract.ValueDivisor(&_TokenWrapper.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_TokenWrapper *TokenWrapperCaller) Version(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "_version")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_TokenWrapper *TokenWrapperSession) Version() (*big.Int, error) {
	return _TokenWrapper.Contract.Version(&_TokenWrapper.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x3e118dbe.
//
// Solidity: function _version() view returns(uint256)
func (_TokenWrapper *TokenWrapperCallerSession) Version() (*big.Int, error) {
	return _TokenWrapper.Contract.Version(&_TokenWrapper.CallOpts)
}

// ControlDigitBytes is a free data retrieval call binding the contract method 0xa53dcd72.
//
// Solidity: function controlDigitBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperCaller) ControlDigitBytes(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "controlDigitBytes")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ControlDigitBytes is a free data retrieval call binding the contract method 0xa53dcd72.
//
// Solidity: function controlDigitBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperSession) ControlDigitBytes() ([]byte, error) {
	return _TokenWrapper.Contract.ControlDigitBytes(&_TokenWrapper.CallOpts)
}

// ControlDigitBytes is a free data retrieval call binding the contract method 0xa53dcd72.
//
// Solidity: function controlDigitBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperCallerSession) ControlDigitBytes() ([]byte, error) {
	return _TokenWrapper.Contract.ControlDigitBytes(&_TokenWrapper.CallOpts)
}

// DataBytesSize is a free data retrieval call binding the contract method 0xe3ac914b.
//
// Solidity: function dataBytesSize() view returns(uint256)
func (_TokenWrapper *TokenWrapperCaller) DataBytesSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "dataBytesSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DataBytesSize is a free data retrieval call binding the contract method 0xe3ac914b.
//
// Solidity: function dataBytesSize() view returns(uint256)
func (_TokenWrapper *TokenWrapperSession) DataBytesSize() (*big.Int, error) {
	return _TokenWrapper.Contract.DataBytesSize(&_TokenWrapper.CallOpts)
}

// DataBytesSize is a free data retrieval call binding the contract method 0xe3ac914b.
//
// Solidity: function dataBytesSize() view returns(uint256)
func (_TokenWrapper *TokenWrapperCallerSession) DataBytesSize() (*big.Int, error) {
	return _TokenWrapper.Contract.DataBytesSize(&_TokenWrapper.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperCaller) GetProps(opts *bind.CallOpts) (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getProps")

	outstruct := new(struct {
		DepositFee   *big.Int
		WithdrawFee  *big.Int
		MinDeposit   *big.Int
		MinWithdraw  *big.Int
		ValueDivisor *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinDeposit = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinWithdraw = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ValueDivisor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _TokenWrapper.Contract.GetProps(&_TokenWrapper.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperCallerSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _TokenWrapper.Contract.GetProps(&_TokenWrapper.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenWrapper.Contract.GetRoleAdmin(&_TokenWrapper.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenWrapper.Contract.GetRoleAdmin(&_TokenWrapper.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TokenWrapper.Contract.GetRoleMember(&_TokenWrapper.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TokenWrapper.Contract.GetRoleMember(&_TokenWrapper.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TokenWrapper.Contract.GetRoleMemberCount(&_TokenWrapper.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TokenWrapper.Contract.GetRoleMemberCount(&_TokenWrapper.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenWrapper.Contract.HasRole(&_TokenWrapper.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenWrapper.Contract.HasRole(&_TokenWrapper.CallOpts, role, account)
}

// HrpBytes is a free data retrieval call binding the contract method 0xd37f5598.
//
// Solidity: function hrpBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperCaller) HrpBytes(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "hrpBytes")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// HrpBytes is a free data retrieval call binding the contract method 0xd37f5598.
//
// Solidity: function hrpBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperSession) HrpBytes() ([]byte, error) {
	return _TokenWrapper.Contract.HrpBytes(&_TokenWrapper.CallOpts)
}

// HrpBytes is a free data retrieval call binding the contract method 0xd37f5598.
//
// Solidity: function hrpBytes() view returns(bytes)
func (_TokenWrapper *TokenWrapperCallerSession) HrpBytes() ([]byte, error) {
	return _TokenWrapper.Contract.HrpBytes(&_TokenWrapper.CallOpts)
}

// IsBech32Valid is a free data retrieval call binding the contract method 0x8f001d4e.
//
// Solidity: function isBech32Valid(string toChainAddress) view returns(bool isAddressValid)
func (_TokenWrapper *TokenWrapperCaller) IsBech32Valid(opts *bind.CallOpts, toChainAddress string) (bool, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "isBech32Valid", toChainAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBech32Valid is a free data retrieval call binding the contract method 0x8f001d4e.
//
// Solidity: function isBech32Valid(string toChainAddress) view returns(bool isAddressValid)
func (_TokenWrapper *TokenWrapperSession) IsBech32Valid(toChainAddress string) (bool, error) {
	return _TokenWrapper.Contract.IsBech32Valid(&_TokenWrapper.CallOpts, toChainAddress)
}

// IsBech32Valid is a free data retrieval call binding the contract method 0x8f001d4e.
//
// Solidity: function isBech32Valid(string toChainAddress) view returns(bool isAddressValid)
func (_TokenWrapper *TokenWrapperCallerSession) IsBech32Valid(toChainAddress string) (bool, error) {
	return _TokenWrapper.Contract.IsBech32Valid(&_TokenWrapper.CallOpts, toChainAddress)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperSession) Paused() (bool, error) {
	return _TokenWrapper.Contract.Paused(&_TokenWrapper.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperCallerSession) Paused() (bool, error) {
	return _TokenWrapper.Contract.Paused(&_TokenWrapper.CallOpts)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperTransactor) GenerateUTokens(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "generateUTokens", to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokens(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokens(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperTransactor) GenerateUTokensInBatch(opts *bind.TransactOpts, to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "generateUTokensInBatch", to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokensInBatch(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokensInBatch(&_TokenWrapper.TransactOpts, to, amount)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GrantRole(&_TokenWrapper.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GrantRole(&_TokenWrapper.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperTransactor) Initialize(opts *bind.TransactOpts, uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "initialize", uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.Initialize(&_TokenWrapper.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.Initialize(&_TokenWrapper.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperSession) Pause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Pause(&_TokenWrapper.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) Pause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Pause(&_TokenWrapper.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RenounceRole(&_TokenWrapper.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RenounceRole(&_TokenWrapper.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RevokeRole(&_TokenWrapper.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RevokeRole(&_TokenWrapper.TransactOpts, role, account)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) SetFees(opts *bind.TransactOpts, depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setFees", depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetFees(&_TokenWrapper.TransactOpts, depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetFees(&_TokenWrapper.TransactOpts, depositFee, withdrawFee)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) SetMinimumValues(opts *bind.TransactOpts, minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setMinimumValues", minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetMinimumValues(&_TokenWrapper.TransactOpts, minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetMinimumValues(&_TokenWrapper.TransactOpts, minDeposit, minWithdraw)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperTransactor) SetUTokensContract(opts *bind.TransactOpts, uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setUTokensContract", uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetUTokensContract(&_TokenWrapper.TransactOpts, uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetUTokensContract(&_TokenWrapper.TransactOpts, uAddress)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperSession) Unpause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Unpause(&_TokenWrapper.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) Unpause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Unpause(&_TokenWrapper.TransactOpts)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperTransactor) WithdrawUTokens(opts *bind.TransactOpts, from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "withdrawUTokens", from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.Contract.WithdrawUTokens(&_TokenWrapper.TransactOpts, from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.Contract.WithdrawUTokens(&_TokenWrapper.TransactOpts, from, tokens, toChainAddress)
}

// TokenWrapperGenerateUTokensIterator is returned from FilterGenerateUTokens and is used to iterate over the raw logs and unpacked data for GenerateUTokens events raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokensIterator struct {
	Event *TokenWrapperGenerateUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperGenerateUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperGenerateUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperGenerateUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperGenerateUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperGenerateUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperGenerateUTokens represents a GenerateUTokens event raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGenerateUTokens is a free log retrieval operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterGenerateUTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (*TokenWrapperGenerateUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "GenerateUTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperGenerateUTokensIterator{contract: _TokenWrapper.contract, event: "GenerateUTokens", logs: logs, sub: sub}, nil
}

// WatchGenerateUTokens is a free log subscription operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchGenerateUTokens(opts *bind.WatchOpts, sink chan<- *TokenWrapperGenerateUTokens, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "GenerateUTokens", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperGenerateUTokens)
				if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGenerateUTokens is a log parse operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseGenerateUTokens(log types.Log) (*TokenWrapperGenerateUTokens, error) {
	event := new(TokenWrapperGenerateUTokens)
	if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperGenerateUTokensInBatchIterator is returned from FilterGenerateUTokensInBatch and is used to iterate over the raw logs and unpacked data for GenerateUTokensInBatch events raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokensInBatchIterator struct {
	Event *TokenWrapperGenerateUTokensInBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperGenerateUTokensInBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperGenerateUTokensInBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperGenerateUTokensInBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperGenerateUTokensInBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperGenerateUTokensInBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperGenerateUTokensInBatch represents a GenerateUTokensInBatch event raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokensInBatch struct {
	AccountAddress []common.Address
	Tokens         []*big.Int
	FinalTokens    []*big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGenerateUTokensInBatch is a free log retrieval operation binding the contract event 0xff03029439b5b79825ca34bca1b453f01e01935bdde5210a8af22f19705ca1a3.
//
// Solidity: event GenerateUTokensInBatch(address[] accountAddress, uint256[] tokens, uint256[] finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterGenerateUTokensInBatch(opts *bind.FilterOpts) (*TokenWrapperGenerateUTokensInBatchIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "GenerateUTokensInBatch")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperGenerateUTokensInBatchIterator{contract: _TokenWrapper.contract, event: "GenerateUTokensInBatch", logs: logs, sub: sub}, nil
}

// WatchGenerateUTokensInBatch is a free log subscription operation binding the contract event 0xff03029439b5b79825ca34bca1b453f01e01935bdde5210a8af22f19705ca1a3.
//
// Solidity: event GenerateUTokensInBatch(address[] accountAddress, uint256[] tokens, uint256[] finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchGenerateUTokensInBatch(opts *bind.WatchOpts, sink chan<- *TokenWrapperGenerateUTokensInBatch) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "GenerateUTokensInBatch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperGenerateUTokensInBatch)
				if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokensInBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGenerateUTokensInBatch is a log parse operation binding the contract event 0xff03029439b5b79825ca34bca1b453f01e01935bdde5210a8af22f19705ca1a3.
//
// Solidity: event GenerateUTokensInBatch(address[] accountAddress, uint256[] tokens, uint256[] finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseGenerateUTokensInBatch(log types.Log) (*TokenWrapperGenerateUTokensInBatch, error) {
	event := new(TokenWrapperGenerateUTokensInBatch)
	if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokensInBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TokenWrapper contract.
type TokenWrapperPausedIterator struct {
	Event *TokenWrapperPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperPaused represents a Paused event raised by the TokenWrapper contract.
type TokenWrapperPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) FilterPaused(opts *bind.FilterOpts) (*TokenWrapperPausedIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperPausedIterator{contract: _TokenWrapper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TokenWrapperPaused) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperPaused)
				if err := _TokenWrapper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) ParsePaused(log types.Log) (*TokenWrapperPaused, error) {
	event := new(TokenWrapperPaused)
	if err := _TokenWrapper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the TokenWrapper contract.
type TokenWrapperRoleAdminChangedIterator struct {
	Event *TokenWrapperRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleAdminChanged represents a RoleAdminChanged event raised by the TokenWrapper contract.
type TokenWrapperRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TokenWrapperRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleAdminChangedIterator{contract: _TokenWrapper.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleAdminChanged)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleAdminChanged(log types.Log) (*TokenWrapperRoleAdminChanged, error) {
	event := new(TokenWrapperRoleAdminChanged)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the TokenWrapper contract.
type TokenWrapperRoleGrantedIterator struct {
	Event *TokenWrapperRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleGranted represents a RoleGranted event raised by the TokenWrapper contract.
type TokenWrapperRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenWrapperRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleGrantedIterator{contract: _TokenWrapper.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleGranted)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleGranted(log types.Log) (*TokenWrapperRoleGranted, error) {
	event := new(TokenWrapperRoleGranted)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the TokenWrapper contract.
type TokenWrapperRoleRevokedIterator struct {
	Event *TokenWrapperRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleRevoked represents a RoleRevoked event raised by the TokenWrapper contract.
type TokenWrapperRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenWrapperRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleRevokedIterator{contract: _TokenWrapper.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleRevoked)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleRevoked(log types.Log) (*TokenWrapperRoleRevoked, error) {
	event := new(TokenWrapperRoleRevoked)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetFeesIterator is returned from FilterSetFees and is used to iterate over the raw logs and unpacked data for SetFees events raised by the TokenWrapper contract.
type TokenWrapperSetFeesIterator struct {
	Event *TokenWrapperSetFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetFees represents a SetFees event raised by the TokenWrapper contract.
type TokenWrapperSetFees struct {
	DepositFee  *big.Int
	WithdrawFee *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFees is a free log retrieval operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed depositFee, uint256 indexed withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetFees(opts *bind.FilterOpts, depositFee []*big.Int, withdrawFee []*big.Int) (*TokenWrapperSetFeesIterator, error) {

	var depositFeeRule []interface{}
	for _, depositFeeItem := range depositFee {
		depositFeeRule = append(depositFeeRule, depositFeeItem)
	}
	var withdrawFeeRule []interface{}
	for _, withdrawFeeItem := range withdrawFee {
		withdrawFeeRule = append(withdrawFeeRule, withdrawFeeItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetFees", depositFeeRule, withdrawFeeRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetFeesIterator{contract: _TokenWrapper.contract, event: "SetFees", logs: logs, sub: sub}, nil
}

// WatchSetFees is a free log subscription operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed depositFee, uint256 indexed withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetFees(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetFees, depositFee []*big.Int, withdrawFee []*big.Int) (event.Subscription, error) {

	var depositFeeRule []interface{}
	for _, depositFeeItem := range depositFee {
		depositFeeRule = append(depositFeeRule, depositFeeItem)
	}
	var withdrawFeeRule []interface{}
	for _, withdrawFeeItem := range withdrawFee {
		withdrawFeeRule = append(withdrawFeeRule, withdrawFeeItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetFees", depositFeeRule, withdrawFeeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetFees)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFees is a log parse operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 indexed depositFee, uint256 indexed withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetFees(log types.Log) (*TokenWrapperSetFees, error) {
	event := new(TokenWrapperSetFees)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetMinimumValuesIterator is returned from FilterSetMinimumValues and is used to iterate over the raw logs and unpacked data for SetMinimumValues events raised by the TokenWrapper contract.
type TokenWrapperSetMinimumValuesIterator struct {
	Event *TokenWrapperSetMinimumValues // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetMinimumValuesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetMinimumValues)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetMinimumValues)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetMinimumValuesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetMinimumValuesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetMinimumValues represents a SetMinimumValues event raised by the TokenWrapper contract.
type TokenWrapperSetMinimumValues struct {
	MinDeposit  *big.Int
	MinWithdraw *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetMinimumValues is a free log retrieval operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minDeposit, uint256 indexed minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetMinimumValues(opts *bind.FilterOpts, minDeposit []*big.Int, minWithdraw []*big.Int) (*TokenWrapperSetMinimumValuesIterator, error) {

	var minDepositRule []interface{}
	for _, minDepositItem := range minDeposit {
		minDepositRule = append(minDepositRule, minDepositItem)
	}
	var minWithdrawRule []interface{}
	for _, minWithdrawItem := range minWithdraw {
		minWithdrawRule = append(minWithdrawRule, minWithdrawItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetMinimumValues", minDepositRule, minWithdrawRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetMinimumValuesIterator{contract: _TokenWrapper.contract, event: "SetMinimumValues", logs: logs, sub: sub}, nil
}

// WatchSetMinimumValues is a free log subscription operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minDeposit, uint256 indexed minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetMinimumValues(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetMinimumValues, minDeposit []*big.Int, minWithdraw []*big.Int) (event.Subscription, error) {

	var minDepositRule []interface{}
	for _, minDepositItem := range minDeposit {
		minDepositRule = append(minDepositRule, minDepositItem)
	}
	var minWithdrawRule []interface{}
	for _, minWithdrawItem := range minWithdraw {
		minWithdrawRule = append(minWithdrawRule, minWithdrawItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetMinimumValues", minDepositRule, minWithdrawRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetMinimumValues)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinimumValues is a log parse operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 indexed minDeposit, uint256 indexed minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetMinimumValues(log types.Log) (*TokenWrapperSetMinimumValues, error) {
	event := new(TokenWrapperSetMinimumValues)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the TokenWrapper contract.
type TokenWrapperSetUTokensContractIterator struct {
	Event *TokenWrapperSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetUTokensContract represents a SetUTokensContract event raised by the TokenWrapper contract.
type TokenWrapperSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*TokenWrapperSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetUTokensContractIterator{contract: _TokenWrapper.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetUTokensContract)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetUTokensContract(log types.Log) (*TokenWrapperSetUTokensContract, error) {
	event := new(TokenWrapperSetUTokensContract)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TokenWrapper contract.
type TokenWrapperUnpausedIterator struct {
	Event *TokenWrapperUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperUnpaused represents a Unpaused event raised by the TokenWrapper contract.
type TokenWrapperUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TokenWrapperUnpausedIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperUnpausedIterator{contract: _TokenWrapper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TokenWrapperUnpaused) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperUnpaused)
				if err := _TokenWrapper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) ParseUnpaused(log types.Log) (*TokenWrapperUnpaused, error) {
	event := new(TokenWrapperUnpaused)
	if err := _TokenWrapper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperWithdrawUTokensIterator is returned from FilterWithdrawUTokens and is used to iterate over the raw logs and unpacked data for WithdrawUTokens events raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokensIterator struct {
	Event *TokenWrapperWithdrawUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperWithdrawUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperWithdrawUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperWithdrawUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperWithdrawUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperWithdrawUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperWithdrawUTokens represents a WithdrawUTokens event raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	ToChainAddress common.Hash
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUTokens is a free log retrieval operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterWithdrawUTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, toChainAddress []string) (*TokenWrapperWithdrawUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	var toChainAddressRule []interface{}
	for _, toChainAddressItem := range toChainAddress {
		toChainAddressRule = append(toChainAddressRule, toChainAddressItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "WithdrawUTokens", accountAddressRule, tokensRule, toChainAddressRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperWithdrawUTokensIterator{contract: _TokenWrapper.contract, event: "WithdrawUTokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawUTokens is a free log subscription operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchWithdrawUTokens(opts *bind.WatchOpts, sink chan<- *TokenWrapperWithdrawUTokens, accountAddress []common.Address, tokens []*big.Int, toChainAddress []string) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	var toChainAddressRule []interface{}
	for _, toChainAddressItem := range toChainAddress {
		toChainAddressRule = append(toChainAddressRule, toChainAddressItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "WithdrawUTokens", accountAddressRule, tokensRule, toChainAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperWithdrawUTokens)
				if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUTokens is a log parse operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseWithdrawUTokens(log types.Log) (*TokenWrapperWithdrawUTokens, error) {
	event := new(TokenWrapperWithdrawUTokens)
	if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperWithdrawUTokensV2Iterator is returned from FilterWithdrawUTokensV2 and is used to iterate over the raw logs and unpacked data for WithdrawUTokensV2 events raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokensV2Iterator struct {
	Event *TokenWrapperWithdrawUTokensV2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperWithdrawUTokensV2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperWithdrawUTokensV2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperWithdrawUTokensV2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperWithdrawUTokensV2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperWithdrawUTokensV2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperWithdrawUTokensV2 represents a WithdrawUTokensV2 event raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokensV2 struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	ToChainAddress string
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUTokensV2 is a free log retrieval operation binding the contract event 0xacd6b7185718e9703bde3bd9dfa3e0f6f9f9b88968d4412acd10cb7d81665248.
//
// Solidity: event WithdrawUTokensV2(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, string toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterWithdrawUTokensV2(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (*TokenWrapperWithdrawUTokensV2Iterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "WithdrawUTokensV2", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperWithdrawUTokensV2Iterator{contract: _TokenWrapper.contract, event: "WithdrawUTokensV2", logs: logs, sub: sub}, nil
}

// WatchWithdrawUTokensV2 is a free log subscription operation binding the contract event 0xacd6b7185718e9703bde3bd9dfa3e0f6f9f9b88968d4412acd10cb7d81665248.
//
// Solidity: event WithdrawUTokensV2(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, string toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchWithdrawUTokensV2(opts *bind.WatchOpts, sink chan<- *TokenWrapperWithdrawUTokensV2, accountAddress []common.Address, tokens []*big.Int, finalTokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}
	var finalTokensRule []interface{}
	for _, finalTokensItem := range finalTokens {
		finalTokensRule = append(finalTokensRule, finalTokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "WithdrawUTokensV2", accountAddressRule, tokensRule, finalTokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperWithdrawUTokensV2)
				if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokensV2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUTokensV2 is a log parse operation binding the contract event 0xacd6b7185718e9703bde3bd9dfa3e0f6f9f9b88968d4412acd10cb7d81665248.
//
// Solidity: event WithdrawUTokensV2(address indexed accountAddress, uint256 indexed tokens, uint256 indexed finalTokens, string toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseWithdrawUTokensV2(log types.Log) (*TokenWrapperWithdrawUTokensV2, error) {
	event := new(TokenWrapperWithdrawUTokensV2)
	if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokensV2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
