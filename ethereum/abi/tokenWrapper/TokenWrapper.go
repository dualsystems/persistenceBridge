// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenWrapper

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TokenWrapperABI is the input ABI used to generate the binding from.
const TokenWrapperABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"GenerateUTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"SetMinimumValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawUTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"generateUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"generateUTokensInBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinimumValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uAddress\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"toChainAddress\",\"type\":\"string\"}],\"name\":\"withdrawUTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// TokenWrapperBin is the compiled bytecode used for deploying new contracts.
var TokenWrapperBin = "0x608060405234801561001057600080fd5b50613c7b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80635c975abb116100b8578063ca15c8731161007c578063ca15c8731461058f578063cf756fdf146105d1578063d547741f1461065f578063e63ab1e9146106ad578063e7fa0a32146106cb578063ec1893b41461081757610137565b80635c975abb1461046b5780638456cb591461048b5780639010d07c146104ab57806391d148541461050d578063a217fddf1461057157610137565b80632f2ff15d116100ff5780632f2ff15d1461027c57806336568abe146102ca5780633f4ba83a14610318578063428bee9e1461033857806351db00e71461041d57610137565b80630b78f9c01461013c578063118c38c71461018a57806321bdf9e5146101a857806322dd9bc3146101ec578063248a9ca31461023a575b600080fd5b6101726004803603604081101561015257600080fd5b810190808035906020019092919080359060200190929190505050610851565b60405180821515815260200191505060405180910390f35b6101926109f2565b6040518082815260200191505060405180910390f35b6101ea600480360360208110156101be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a16565b005b6102386004803603604081101561020257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b23565b005b6102666004803603602081101561025057600080fd5b8101908080359060200190929190505050610d21565b6040518082815260200191505060405180910390f35b6102c86004803603604081101561029257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d41565b005b610316600480360360408110156102e057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dcb565b005b610320610e64565b60405180821515815260200191505060405180910390f35b61041b6004803603606081101561034e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561039557600080fd5b8201836020820111156103a757600080fd5b803590602001918460018302840111640100000000831117156103c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610f18565b005b6104536004803603604081101561043357600080fd5b810190808035906020019092919080359060200190929190505050611592565b60405180821515815260200191505060405180910390f35b610473611775565b60405180821515815260200191505060405180910390f35b61049361178c565b60405180821515815260200191505060405180910390f35b6104e1600480360360408110156104c157600080fd5b810190808035906020019092919080359060200190929190505050611840565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105596004803603604081101561052357600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611872565b60405180821515815260200191505060405180910390f35b6105796118a4565b6040518082815260200191505060405180910390f35b6105bb600480360360208110156105a557600080fd5b81019080803590602001909291905050506118ab565b6040518082815260200191505060405180910390f35b61065d600480360360808110156105e757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506118d2565b005b6106ab6004803603604081101561067557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611afc565b005b6106b5611b86565b6040518082815260200191505060405180910390f35b610815600480360360408110156106e157600080fd5b81019080803590602001906401000000008111156106fe57600080fd5b82018360208201111561071057600080fd5b8035906020019184602083028401116401000000008311171561073257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561079257600080fd5b8201836020820111156107a457600080fd5b803590602001918460208302840111640100000000831117156107c657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611baa565b005b61081f611ecf565b604051808681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b60006108676000801b610862611ef7565b611872565b6108d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545731000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6108ef6064609c54611eff90919063ffffffff16565b8311158061091e575060008314801561091d57506109196064609c54611eff90919063ffffffff16565b8211155b5b806109295750600082145b61099b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545732000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82609a8190555081609b819055507f3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d15328383604051808381526020018281526020019250505060405180910390a16001905092915050565b7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf81565b610a2a6000801b610a25611ef7565b611872565b610a9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545736000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c60405160405180910390a250565b610b2b611775565b15610b9e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b60008111610c14576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545739000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610c457f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf610c40611ef7565b611872565b610cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731300000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000610cc38383611f85565b9050818373ffffffffffffffffffffffffffffffffffffffff167f572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d88342604051808381526020018281526020019250505060405180910390a3505050565b600060656000838152602001908152602001600020600201549050919050565b610d686065600084815260200190815260200160002060020154610d63611ef7565b611872565b610dbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613b69602f913960400191505060405180910390fd5b610dc782826120a1565b5050565b610dd3611ef7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613c17602f913960400191505060405180910390fd5b610e608282612135565b5050565b6000610e977f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610e92611ef7565b611872565b610f09576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545738000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610f116121c9565b6001905090565b610f20611775565b15610f93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b609954821161100a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731340000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000611159609d8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110a55780601f1061107a576101008083540402835291602001916110a5565b820191906000526020600020905b81548152906001019060200180831161108857829003601f168201915b5050505050609e8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111405780601f1061111557610100808354040283529160200191611140565b820191906000526020600020905b81548152906001019060200180831161112357829003601f168201915b5050505050609f54856122b4909392919063ffffffff16565b905060011515811515146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731350000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561126057600080fd5b505afa158015611274573d6000803e3d6000fd5b505050506040513d602081101561128a57600080fd5b8101908080519060200190929190505050905060006112b8609b54609c54876124029092919063ffffffff16565b905060006112e26112d36064846124e290919063ffffffff16565b8761256b90919063ffffffff16565b90508083101561135a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731360000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611362611ef7565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731370000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac88836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561149557600080fd5b505af11580156114a9573d6000803e3d6000fd5b505050506040513d60208110156114bf57600080fd5b810190808051906020019092919050505050846040518082805190602001908083835b6020831061150557805182526020820191506020810190506020830392506114e2565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020868873ffffffffffffffffffffffffffffffffffffffff167f0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e8442604051808381526020018281526020019250505060405180910390a450505050505050565b60006115a86000801b6115a3611ef7565b611872565b61161a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545733000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600083148061162a575060018310155b61169c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545734000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008214806116ac575060018210155b61171e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545735000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b82609881905550816099819055507fa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe38383604051808381526020018281526020019250505060405180910390a16001905092915050565b6000603360009054906101000a900460ff16905090565b60006117bf7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117ba611ef7565b611872565b611831576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f545737000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6118396125f3565b6001905090565b600061186a82606560008681526020019081526020016000206000016126df90919063ffffffff16565b905092915050565b600061189c82606560008681526020019081526020016000206000016126f990919063ffffffff16565b905092915050565b6000801b81565b60006118cb60656000848152602001908152602001600020600001612729565b9050919050565b600060019054906101000a900460ff16806118f157506118f061273e565b5b80611907575060008054906101000a900460ff16155b61195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156119ac576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6119b461274f565b6119bc61285d565b6119d06000801b6119cb611ef7565b61296b565b6119fa7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf8561296b565b611a247f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8461296b565b611a2d85610a16565b81609c819055506040518060400160405280600681526020017f636f736d6f730000000000000000000000000000000000000000000000000000815250609d9080519060200190611a7f929190613a9b565b506040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250609e9080519060200190611acb929190613a9b565b506026609f819055508015611af55760008060016101000a81548160ff0219169083151502179055505b5050505050565b611b236065600084815260200190815260200160002060020154611b1e611ef7565b611872565b611b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613b986030913960400191505060405180910390fd5b611b828282612135565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b611bb2611775565b15611c25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b8051825114611c9c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731310000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611ccd7f751b795d24b92e3d92d1d0d8f2885f4e9c9c269da350af36ae6b49069babf4bf611cc8611ef7565b611872565b611d3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731320000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600080600091505b8351821015611e26576000838381518110611d5e57fe5b602002602001015111611dd9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260048152602001807f545731330000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b611e09848381518110611de857fe5b6020026020010151848481518110611dfc57fe5b6020026020010151611f85565b9050611e1f60018361256b90919063ffffffff16565b9150611d47565b82611e3b60018461297990919063ffffffff16565b81518110611e4557fe5b602002602001015184611e6260018561297990919063ffffffff16565b81518110611e6c57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff167f572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d88342604051808381526020018281526020019250505060405180910390a350505050565b6000806000806000609a549450609b54935060985492506099549150609c5490509091929394565b600033905090565b600080831415611f125760009050611f7f565b6000828402905082848281611f2357fe5b0414611f7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613bf66021913960400191505060405180910390fd5b809150505b92915050565b600080611fa1609a54609c54856124029092919063ffffffff16565b9050611fc9611fba6064836124e290919063ffffffff16565b8461297990919063ffffffff16565b9150609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1985846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561205e57600080fd5b505af1158015612072573d6000803e3d6000fd5b505050506040513d602081101561208857600080fd5b8101908080519060200190929190505050505092915050565b6120c981606560008581526020019081526020016000206000016129fc90919063ffffffff16565b15612131576120d6611ef7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61215d8160656000858152602001908152602001600020600001612a2c90919063ffffffff16565b156121c55761216a611ef7565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6121d1611775565b612243576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000603360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612287611ef7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60008085905060006122d36000875184612a5c9092919063ffffffff16565b90506122e88682612bce90919063ffffffff16565b6122f7576000925050506123fa565b60006123108251600185612a5c9092919063ffffffff16565b90506123258682612bce90919063ffffffff16565b61233557600093505050506123fa565b60006123576001845101600185518751030386612a5c9092919063ffffffff16565b90508581511461236e5760009450505050506123fa565b60006123936001855101600186516006895103030387612a5c9092919063ffffffff16565b905060006123a082612c3b565b90506000815114156123bb57600096505050505050506123fa565b60006123c686612e14565b905060006123d48284612eb4565b905060006123eb8287612bce90919063ffffffff16565b90508099505050505050505050505b949350505050565b60008060006124118686612fdc565b915091506000848061241f57fe5b868809905082811115612433576001820391505b808303925060008214156124555784838161244a57fe5b0493505050506124db565b8482106124ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f5700000000000081525060200191505060405180910390fd5b6124d583838761302f565b93505050505b9392505050565b6000808211612559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b81838161256257fe5b04905092915050565b6000808284019050838110156125e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6125fb611775565b1561266e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001603360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126b2611ef7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b60006126ee83600001836130cc565b60001c905092915050565b6000612721836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61314f565b905092915050565b600061273782600001613172565b9050919050565b600061274930613183565b15905090565b600060019054906101000a900460ff168061276e575061276d61273e565b5b80612784575060008054906101000a900460ff16155b6127d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612829576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612831613196565b612839613294565b801561285a5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061287c575061287b61273e565b5b80612892575060008054906101000a900460ff16155b6128e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612937576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61293f613196565b612947613392565b80156129685760008060016101000a81548160ff0219169083151502179055505b50565b61297582826120a1565b5050565b6000828211156129f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b818303905092915050565b6000612a24836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6134ab565b905092915050565b6000612a54836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61351b565b905092915050565b606081601f83011015612ad7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f736c6963655f6f766572666c6f7700000000000000000000000000000000000081525060200191505060405180910390fd5b81830184511015612b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f736c6963655f6f75744f66426f756e647300000000000000000000000000000081525060200191505060405180910390fd5b6060821560008114612b715760405191506000825260208201604052612bc2565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612baf5780518352602083019250602081019050612b92565b50868552601f19601f8301166040525050505b50809150509392505050565b6000806001905083518351811460018114612bec5760009250612c2f565b600160208701838101602088015b600284838510011415612c2a578051835114612c195760009650600093505b602083019250602081019050612bfa565b505050505b50508091505092915050565b6060815167ffffffffffffffff81118015612c5557600080fd5b50604051908082528060200260200182016040528015612c845781602001602082028036833780820191505090505b5090506060600080600090505b8451811015612e0b57600091505b6040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c81525051821015612d9c576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c8152508281518110612d1e57fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916858281518110612d5757fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415612d8f57612d9c565b8180600101925050612c9f565b6040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c81525051821415612de557829350505050612e0f565b81848281518110612df257fe5b6020026020010181815250508080600101915050612c91565b5050505b919050565b6060815167ffffffffffffffff81118015612e2e57600080fd5b50604051908082528060200260200182016040528015612e5d5781602001602082028036833780820191505090505b50905060005b8251811015612eae57828181518110612e7857fe5b602001015160f81c60f81b60f81c60ff16828281518110612e9557fe5b6020026020010181815250508080600101915050612e63565b50919050565b60606000612ecb83612ec68686613603565b6136ce565b90506000815167ffffffffffffffff81118015612ee757600080fd5b506040519080825280601f01601f191660200182016040528015612f1a5781602001600182028036833780820191505090505b50905060005b8251811015612fd0576040518060400160405280602081526020017f71707a7279397838676632747664773073336a6e35346b686365366d7561376c815250838281518110612f6b57fe5b602002602001015181518110612f7d57fe5b602001015160f81c60f81b828281518110612f9457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612f20565b50809250505092915050565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8061300957fe5b84860990508385029250828103915082811015613027576001820391505b509250929050565b600080826000038316905080838161304357fe5b04925080858161304f57fe5b049450600181826000038161306057fe5b04018402850194506000600190508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808402600203810290508084026002038102905080840260020381029050808602925050509392505050565b60008183600001805490501161312d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613b476022913960400191505060405180910390fd5b82600001828154811061313c57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b600080823b905060008111915050919050565b600060019054906101000a900460ff16806131b557506131b461273e565b5b806131cb575060008054906101000a900460ff16155b613220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015613270576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156132915760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806132b357506132b261273e565b5b806132c9575060008054906101000a900460ff16155b61331e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561336e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561338f5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806133b157506133b061273e565b5b806133c7575060008054906101000a900460ff16155b61341c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613bc8602e913960400191505060405180910390fd5b60008060019054906101000a900460ff16159050801561346c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000603360006101000a81548160ff02191690831515021790555080156134a85760008060016101000a81548160ff0219169083151502179055505b50565b60006134b7838361314f565b613510578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613515565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146135f7576000600182039050600060018660000180549050039050600086600001828154811061356657fe5b906000526020600020015490508087600001848154811061358357fe5b90600052602060002001819055506001830187600101600083815260200190815260200160002081905550866000018054806135bb57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506135fd565b60009150505b92915050565b6060600061362561361c613616866137b9565b856136ce565b600060066138ca565b905060006001613634836139a3565b1890506000600667ffffffffffffffff8111801561365157600080fd5b506040519080825280602002602001820160405280156136805781602001602082028036833780820191505090505b50905060005b60068110156136c157601f8160050360050284901c168282815181106136a857fe5b6020026020010181815250508080600101915050613686565b5080935050505092915050565b60606000825184510167ffffffffffffffff811180156136ed57600080fd5b5060405190808252806020026020018201604052801561371c5781602001602082028036833780820191505090505b50905060005b84518110156137645784818151811061373757fe5b602002602001015182828151811061374b57fe5b6020026020010181815250508080600101915050613722565b60005b84518110156137ad5784818060010192508151811061378257fe5b602002602001015183838060010194508151811061379c57fe5b602002602001018181525050613767565b82935050505092915050565b60606000600183518451010167ffffffffffffffff811180156137db57600080fd5b5060405190808252806020026020018201604052801561380a5781602001602082028036833780820191505090505b50905060005b835181101561385657600584828151811061382757fe5b6020026020010151901c82828151811061383d57fe5b6020026020010181815250508080600101915050613810565b5060008184518151811061386657fe5b60200260200101818152505060005b83518110156138c057601f84828151811061388c57fe5b6020026020010151168260018651840101815181106138a757fe5b6020026020010181815250508080600101915050613875565b5080915050919050565b606060008285510167ffffffffffffffff811180156138e857600080fd5b506040519080825280602002602001820160405280156139175781602001602082028036833780820191505090505b50905060005b855181101561395f5785818151811061393257fe5b602002602001015182828151811061394657fe5b602002602001018181525050808060010191505061391d565b60005b84811015613996578583838060010194508151811061397d57fe5b6020026020010181815250508080600101915050613962565b8293505050509392505050565b6000806040518060a00160405280633b6a57b263ffffffff1681526020016326508e6d63ffffffff168152602001631ea119fa63ffffffff168152602001633d4233dd63ffffffff168152602001632a1462b363ffffffff16815250905060006001905060005b8451811015613a90576000601983901c9050858281518110613a2857fe5b602002602001015160056301ffffff8516901b18925060005b6005811015613a81576001808284901c161415613a7457848160058110613a6457fe5b602002015163ffffffff16841893505b8080600101915050613a41565b50508080600101915050613a0a565b508092505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282613ad15760008555613b18565b82601f10613aea57805160ff1916838001178555613b18565b82800160010185558215613b18579182015b82811115613b17578251825591602001919060010190613afc565b5b509050613b259190613b29565b5090565b5b80821115613b42576000816000905550600101613b2a565b509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e74416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a26469706673582212200d822f45b3577979eddb599be9ff530b34034d07b45785a80eb575db190a3b4464736f6c63430007060033"

// DeployTokenWrapper deploys a new Ethereum contract, binding an instance of TokenWrapper to it.
func DeployTokenWrapper(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenWrapper, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenWrapperABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenWrapperBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenWrapper{TokenWrapperCaller: TokenWrapperCaller{contract: contract}, TokenWrapperTransactor: TokenWrapperTransactor{contract: contract}, TokenWrapperFilterer: TokenWrapperFilterer{contract: contract}}, nil
}

// TokenWrapper is an auto generated Go binding around an Ethereum contract.
type TokenWrapper struct {
	TokenWrapperCaller     // Read-only binding to the contract
	TokenWrapperTransactor // Write-only binding to the contract
	TokenWrapperFilterer   // Log filterer for contract events
}

// TokenWrapperCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenWrapperCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenWrapperTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenWrapperFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenWrapperSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenWrapperSession struct {
	Contract     *TokenWrapper     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenWrapperCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenWrapperCallerSession struct {
	Contract *TokenWrapperCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TokenWrapperTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenWrapperTransactorSession struct {
	Contract     *TokenWrapperTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenWrapperRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenWrapperRaw struct {
	Contract *TokenWrapper // Generic contract binding to access the raw methods on
}

// TokenWrapperCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenWrapperCallerRaw struct {
	Contract *TokenWrapperCaller // Generic read-only contract binding to access the raw methods on
}

// TokenWrapperTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenWrapperTransactorRaw struct {
	Contract *TokenWrapperTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenWrapper creates a new instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapper(address common.Address, backend bind.ContractBackend) (*TokenWrapper, error) {
	contract, err := bindTokenWrapper(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenWrapper{TokenWrapperCaller: TokenWrapperCaller{contract: contract}, TokenWrapperTransactor: TokenWrapperTransactor{contract: contract}, TokenWrapperFilterer: TokenWrapperFilterer{contract: contract}}, nil
}

// NewTokenWrapperCaller creates a new read-only instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperCaller(address common.Address, caller bind.ContractCaller) (*TokenWrapperCaller, error) {
	contract, err := bindTokenWrapper(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperCaller{contract: contract}, nil
}

// NewTokenWrapperTransactor creates a new write-only instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenWrapperTransactor, error) {
	contract, err := bindTokenWrapper(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperTransactor{contract: contract}, nil
}

// NewTokenWrapperFilterer creates a new log filterer instance of TokenWrapper, bound to a specific deployed contract.
func NewTokenWrapperFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenWrapperFilterer, error) {
	contract, err := bindTokenWrapper(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperFilterer{contract: contract}, nil
}

// bindTokenWrapper binds a generic wrapper to an already deployed contract.
func bindTokenWrapper(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenWrapperABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenWrapper *TokenWrapperRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenWrapper.Contract.TokenWrapperCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenWrapper *TokenWrapperRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.Contract.TokenWrapperTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenWrapper *TokenWrapperRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenWrapper.Contract.TokenWrapperTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenWrapper *TokenWrapperCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenWrapper.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenWrapper *TokenWrapperTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenWrapper *TokenWrapperTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenWrapper.Contract.contract.Transact(opts, method, params...)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) BRIDGEADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "BRIDGE_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.BRIDGEADMINROLE(&_TokenWrapper.CallOpts)
}

// BRIDGEADMINROLE is a free data retrieval call binding the contract method 0x118c38c7.
//
// Solidity: function BRIDGE_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) BRIDGEADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.BRIDGEADMINROLE(&_TokenWrapper.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.DEFAULTADMINROLE(&_TokenWrapper.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.DEFAULTADMINROLE(&_TokenWrapper.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) PAUSERROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.PAUSERROLE(&_TokenWrapper.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) PAUSERROLE() ([32]byte, error) {
	return _TokenWrapper.Contract.PAUSERROLE(&_TokenWrapper.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperCaller) GetProps(opts *bind.CallOpts) (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getProps")

	outstruct := new(struct {
		DepositFee   *big.Int
		WithdrawFee  *big.Int
		MinDeposit   *big.Int
		MinWithdraw  *big.Int
		ValueDivisor *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.DepositFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.WithdrawFee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.MinDeposit = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.MinWithdraw = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ValueDivisor = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _TokenWrapper.Contract.GetProps(&_TokenWrapper.CallOpts)
}

// GetProps is a free data retrieval call binding the contract method 0xec1893b4.
//
// Solidity: function getProps() view returns(uint256 depositFee, uint256 withdrawFee, uint256 minDeposit, uint256 minWithdraw, uint256 valueDivisor)
func (_TokenWrapper *TokenWrapperCallerSession) GetProps() (struct {
	DepositFee   *big.Int
	WithdrawFee  *big.Int
	MinDeposit   *big.Int
	MinWithdraw  *big.Int
	ValueDivisor *big.Int
}, error) {
	return _TokenWrapper.Contract.GetProps(&_TokenWrapper.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenWrapper.Contract.GetRoleAdmin(&_TokenWrapper.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenWrapper.Contract.GetRoleAdmin(&_TokenWrapper.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TokenWrapper.Contract.GetRoleMember(&_TokenWrapper.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _TokenWrapper.Contract.GetRoleMember(&_TokenWrapper.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TokenWrapper.Contract.GetRoleMemberCount(&_TokenWrapper.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_TokenWrapper *TokenWrapperCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _TokenWrapper.Contract.GetRoleMemberCount(&_TokenWrapper.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenWrapper.Contract.HasRole(&_TokenWrapper.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenWrapper *TokenWrapperCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenWrapper.Contract.HasRole(&_TokenWrapper.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _TokenWrapper.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperSession) Paused() (bool, error) {
	return _TokenWrapper.Contract.Paused(&_TokenWrapper.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_TokenWrapper *TokenWrapperCallerSession) Paused() (bool, error) {
	return _TokenWrapper.Contract.Paused(&_TokenWrapper.CallOpts)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperTransactor) GenerateUTokens(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "generateUTokens", to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokens(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokens is a paid mutator transaction binding the contract method 0x22dd9bc3.
//
// Solidity: function generateUTokens(address to, uint256 amount) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GenerateUTokens(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokens(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperTransactor) GenerateUTokensInBatch(opts *bind.TransactOpts, to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "generateUTokensInBatch", to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokensInBatch(&_TokenWrapper.TransactOpts, to, amount)
}

// GenerateUTokensInBatch is a paid mutator transaction binding the contract method 0xe7fa0a32.
//
// Solidity: function generateUTokensInBatch(address[] to, uint256[] amount) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GenerateUTokensInBatch(to []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GenerateUTokensInBatch(&_TokenWrapper.TransactOpts, to, amount)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GrantRole(&_TokenWrapper.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.GrantRole(&_TokenWrapper.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperTransactor) Initialize(opts *bind.TransactOpts, uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "initialize", uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.Initialize(&_TokenWrapper.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xcf756fdf.
//
// Solidity: function initialize(address uAddress, address bridgeAdminAddress, address pauserAddress, uint256 valueDivisor) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) Initialize(uAddress common.Address, bridgeAdminAddress common.Address, pauserAddress common.Address, valueDivisor *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.Initialize(&_TokenWrapper.TransactOpts, uAddress, bridgeAdminAddress, pauserAddress, valueDivisor)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperSession) Pause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Pause(&_TokenWrapper.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) Pause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Pause(&_TokenWrapper.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RenounceRole(&_TokenWrapper.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RenounceRole(&_TokenWrapper.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RevokeRole(&_TokenWrapper.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.RevokeRole(&_TokenWrapper.TransactOpts, role, account)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) SetFees(opts *bind.TransactOpts, depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setFees", depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetFees(&_TokenWrapper.TransactOpts, depositFee, withdrawFee)
}

// SetFees is a paid mutator transaction binding the contract method 0x0b78f9c0.
//
// Solidity: function setFees(uint256 depositFee, uint256 withdrawFee) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) SetFees(depositFee *big.Int, withdrawFee *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetFees(&_TokenWrapper.TransactOpts, depositFee, withdrawFee)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) SetMinimumValues(opts *bind.TransactOpts, minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setMinimumValues", minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetMinimumValues(&_TokenWrapper.TransactOpts, minDeposit, minWithdraw)
}

// SetMinimumValues is a paid mutator transaction binding the contract method 0x51db00e7.
//
// Solidity: function setMinimumValues(uint256 minDeposit, uint256 minWithdraw) returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) SetMinimumValues(minDeposit *big.Int, minWithdraw *big.Int) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetMinimumValues(&_TokenWrapper.TransactOpts, minDeposit, minWithdraw)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperTransactor) SetUTokensContract(opts *bind.TransactOpts, uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "setUTokensContract", uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetUTokensContract(&_TokenWrapper.TransactOpts, uAddress)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uAddress) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) SetUTokensContract(uAddress common.Address) (*types.Transaction, error) {
	return _TokenWrapper.Contract.SetUTokensContract(&_TokenWrapper.TransactOpts, uAddress)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperSession) Unpause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Unpause(&_TokenWrapper.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_TokenWrapper *TokenWrapperTransactorSession) Unpause() (*types.Transaction, error) {
	return _TokenWrapper.Contract.Unpause(&_TokenWrapper.TransactOpts)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperTransactor) WithdrawUTokens(opts *bind.TransactOpts, from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.contract.Transact(opts, "withdrawUTokens", from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.Contract.WithdrawUTokens(&_TokenWrapper.TransactOpts, from, tokens, toChainAddress)
}

// WithdrawUTokens is a paid mutator transaction binding the contract method 0x428bee9e.
//
// Solidity: function withdrawUTokens(address from, uint256 tokens, string toChainAddress) returns()
func (_TokenWrapper *TokenWrapperTransactorSession) WithdrawUTokens(from common.Address, tokens *big.Int, toChainAddress string) (*types.Transaction, error) {
	return _TokenWrapper.Contract.WithdrawUTokens(&_TokenWrapper.TransactOpts, from, tokens, toChainAddress)
}

// TokenWrapperGenerateUTokensIterator is returned from FilterGenerateUTokens and is used to iterate over the raw logs and unpacked data for GenerateUTokens events raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokensIterator struct {
	Event *TokenWrapperGenerateUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperGenerateUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperGenerateUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperGenerateUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperGenerateUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperGenerateUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperGenerateUTokens represents a GenerateUTokens event raised by the TokenWrapper contract.
type TokenWrapperGenerateUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterGenerateUTokens is a free log retrieval operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterGenerateUTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int) (*TokenWrapperGenerateUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "GenerateUTokens", accountAddressRule, tokensRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperGenerateUTokensIterator{contract: _TokenWrapper.contract, event: "GenerateUTokens", logs: logs, sub: sub}, nil
}

// WatchGenerateUTokens is a free log subscription operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchGenerateUTokens(opts *bind.WatchOpts, sink chan<- *TokenWrapperGenerateUTokens, accountAddress []common.Address, tokens []*big.Int) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "GenerateUTokens", accountAddressRule, tokensRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperGenerateUTokens)
				if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGenerateUTokens is a log parse operation binding the contract event 0x572f067f64ae57ed816b7e9b5424a87d97035d68384f149586cba42b4192c9d8.
//
// Solidity: event GenerateUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseGenerateUTokens(log types.Log) (*TokenWrapperGenerateUTokens, error) {
	event := new(TokenWrapperGenerateUTokens)
	if err := _TokenWrapper.contract.UnpackLog(event, "GenerateUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the TokenWrapper contract.
type TokenWrapperPausedIterator struct {
	Event *TokenWrapperPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperPaused represents a Paused event raised by the TokenWrapper contract.
type TokenWrapperPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) FilterPaused(opts *bind.FilterOpts) (*TokenWrapperPausedIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperPausedIterator{contract: _TokenWrapper.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *TokenWrapperPaused) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperPaused)
				if err := _TokenWrapper.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_TokenWrapper *TokenWrapperFilterer) ParsePaused(log types.Log) (*TokenWrapperPaused, error) {
	event := new(TokenWrapperPaused)
	if err := _TokenWrapper.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the TokenWrapper contract.
type TokenWrapperRoleAdminChangedIterator struct {
	Event *TokenWrapperRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleAdminChanged represents a RoleAdminChanged event raised by the TokenWrapper contract.
type TokenWrapperRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TokenWrapperRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleAdminChangedIterator{contract: _TokenWrapper.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleAdminChanged)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleAdminChanged(log types.Log) (*TokenWrapperRoleAdminChanged, error) {
	event := new(TokenWrapperRoleAdminChanged)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the TokenWrapper contract.
type TokenWrapperRoleGrantedIterator struct {
	Event *TokenWrapperRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleGranted represents a RoleGranted event raised by the TokenWrapper contract.
type TokenWrapperRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenWrapperRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleGrantedIterator{contract: _TokenWrapper.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleGranted)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleGranted(log types.Log) (*TokenWrapperRoleGranted, error) {
	event := new(TokenWrapperRoleGranted)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the TokenWrapper contract.
type TokenWrapperRoleRevokedIterator struct {
	Event *TokenWrapperRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperRoleRevoked represents a RoleRevoked event raised by the TokenWrapper contract.
type TokenWrapperRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenWrapperRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperRoleRevokedIterator{contract: _TokenWrapper.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TokenWrapperRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperRoleRevoked)
				if err := _TokenWrapper.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenWrapper *TokenWrapperFilterer) ParseRoleRevoked(log types.Log) (*TokenWrapperRoleRevoked, error) {
	event := new(TokenWrapperRoleRevoked)
	if err := _TokenWrapper.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetFeesIterator is returned from FilterSetFees and is used to iterate over the raw logs and unpacked data for SetFees events raised by the TokenWrapper contract.
type TokenWrapperSetFeesIterator struct {
	Event *TokenWrapperSetFees // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetFeesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetFees)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetFees)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetFeesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetFeesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetFees represents a SetFees event raised by the TokenWrapper contract.
type TokenWrapperSetFees struct {
	DepositFee  *big.Int
	WithdrawFee *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetFees is a free log retrieval operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetFees(opts *bind.FilterOpts) (*TokenWrapperSetFeesIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetFeesIterator{contract: _TokenWrapper.contract, event: "SetFees", logs: logs, sub: sub}, nil
}

// WatchSetFees is a free log subscription operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetFees(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetFees) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetFees")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetFees)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetFees", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetFees is a log parse operation binding the contract event 0x3be6e637f54f081a2dd12982cfd58481304fc98b604b18fa8ed4aa4e4a9d1532.
//
// Solidity: event SetFees(uint256 depositFee, uint256 withdrawFee)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetFees(log types.Log) (*TokenWrapperSetFees, error) {
	event := new(TokenWrapperSetFees)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetFees", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetMinimumValuesIterator is returned from FilterSetMinimumValues and is used to iterate over the raw logs and unpacked data for SetMinimumValues events raised by the TokenWrapper contract.
type TokenWrapperSetMinimumValuesIterator struct {
	Event *TokenWrapperSetMinimumValues // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetMinimumValuesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetMinimumValues)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetMinimumValues)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetMinimumValuesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetMinimumValuesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetMinimumValues represents a SetMinimumValues event raised by the TokenWrapper contract.
type TokenWrapperSetMinimumValues struct {
	MinDeposit  *big.Int
	MinWithdraw *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetMinimumValues is a free log retrieval operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetMinimumValues(opts *bind.FilterOpts) (*TokenWrapperSetMinimumValuesIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetMinimumValuesIterator{contract: _TokenWrapper.contract, event: "SetMinimumValues", logs: logs, sub: sub}, nil
}

// WatchSetMinimumValues is a free log subscription operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetMinimumValues(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetMinimumValues) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetMinimumValues")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetMinimumValues)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinimumValues is a log parse operation binding the contract event 0xa94d40347449ea19b873d64ed55c99772194c49791e82be5c2dc24e4c0044fe3.
//
// Solidity: event SetMinimumValues(uint256 minDeposit, uint256 minWithdraw)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetMinimumValues(log types.Log) (*TokenWrapperSetMinimumValues, error) {
	event := new(TokenWrapperSetMinimumValues)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetMinimumValues", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the TokenWrapper contract.
type TokenWrapperSetUTokensContractIterator struct {
	Event *TokenWrapperSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperSetUTokensContract represents a SetUTokensContract event raised by the TokenWrapper contract.
type TokenWrapperSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*TokenWrapperSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperSetUTokensContractIterator{contract: _TokenWrapper.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *TokenWrapperSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperSetUTokensContract)
				if err := _TokenWrapper.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_TokenWrapper *TokenWrapperFilterer) ParseSetUTokensContract(log types.Log) (*TokenWrapperSetUTokensContract, error) {
	event := new(TokenWrapperSetUTokensContract)
	if err := _TokenWrapper.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the TokenWrapper contract.
type TokenWrapperUnpausedIterator struct {
	Event *TokenWrapperUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperUnpaused represents a Unpaused event raised by the TokenWrapper contract.
type TokenWrapperUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) FilterUnpaused(opts *bind.FilterOpts) (*TokenWrapperUnpausedIterator, error) {

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &TokenWrapperUnpausedIterator{contract: _TokenWrapper.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *TokenWrapperUnpaused) (event.Subscription, error) {

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperUnpaused)
				if err := _TokenWrapper.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_TokenWrapper *TokenWrapperFilterer) ParseUnpaused(log types.Log) (*TokenWrapperUnpaused, error) {
	event := new(TokenWrapperUnpaused)
	if err := _TokenWrapper.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenWrapperWithdrawUTokensIterator is returned from FilterWithdrawUTokens and is used to iterate over the raw logs and unpacked data for WithdrawUTokens events raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokensIterator struct {
	Event *TokenWrapperWithdrawUTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenWrapperWithdrawUTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenWrapperWithdrawUTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenWrapperWithdrawUTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenWrapperWithdrawUTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenWrapperWithdrawUTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenWrapperWithdrawUTokens represents a WithdrawUTokens event raised by the TokenWrapper contract.
type TokenWrapperWithdrawUTokens struct {
	AccountAddress common.Address
	Tokens         *big.Int
	FinalTokens    *big.Int
	ToChainAddress common.Hash
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawUTokens is a free log retrieval operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) FilterWithdrawUTokens(opts *bind.FilterOpts, accountAddress []common.Address, tokens []*big.Int, toChainAddress []string) (*TokenWrapperWithdrawUTokensIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	var toChainAddressRule []interface{}
	for _, toChainAddressItem := range toChainAddress {
		toChainAddressRule = append(toChainAddressRule, toChainAddressItem)
	}

	logs, sub, err := _TokenWrapper.contract.FilterLogs(opts, "WithdrawUTokens", accountAddressRule, tokensRule, toChainAddressRule)
	if err != nil {
		return nil, err
	}
	return &TokenWrapperWithdrawUTokensIterator{contract: _TokenWrapper.contract, event: "WithdrawUTokens", logs: logs, sub: sub}, nil
}

// WatchWithdrawUTokens is a free log subscription operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) WatchWithdrawUTokens(opts *bind.WatchOpts, sink chan<- *TokenWrapperWithdrawUTokens, accountAddress []common.Address, tokens []*big.Int, toChainAddress []string) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}
	var tokensRule []interface{}
	for _, tokensItem := range tokens {
		tokensRule = append(tokensRule, tokensItem)
	}

	var toChainAddressRule []interface{}
	for _, toChainAddressItem := range toChainAddress {
		toChainAddressRule = append(toChainAddressRule, toChainAddressItem)
	}

	logs, sub, err := _TokenWrapper.contract.WatchLogs(opts, "WithdrawUTokens", accountAddressRule, tokensRule, toChainAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenWrapperWithdrawUTokens)
				if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawUTokens is a log parse operation binding the contract event 0x0f4363f6961ed151f2cf8f720784b70c0f5573f216fc939f67f2a5d12698e02e.
//
// Solidity: event WithdrawUTokens(address indexed accountAddress, uint256 indexed tokens, uint256 finalTokens, string indexed toChainAddress, uint256 timestamp)
func (_TokenWrapper *TokenWrapperFilterer) ParseWithdrawUTokens(log types.Log) (*TokenWrapperWithdrawUTokens, error) {
	event := new(TokenWrapperWithdrawUTokens)
	if err := _TokenWrapper.contract.UnpackLog(event, "WithdrawUTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
