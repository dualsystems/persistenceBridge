// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sTokens

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// STokensABI is the input ABI used to generate the binding from.
const STokensABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CalculateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetLiquidStakingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetUTokensContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"SetWrapperContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TriggeredCalculateRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"calculateRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardRate\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"rewardDivisor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getStakedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDivisor\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidStakingContract\",\"type\":\"address\"}],\"name\":\"setLiquidStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uTokenContract\",\"type\":\"address\"}],\"name\":\"setUTokensContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapperContract\",\"type\":\"address\"}],\"name\":\"setWrapperContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// STokensBin is the compiled bytecode used for deploying new contracts.
var STokensBin = ""

// DeploySTokens deploys a new Ethereum contract, binding an instance of STokens to it.
func DeploySTokens(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *STokens, error) {
	parsed, err := abi.JSON(strings.NewReader(STokensABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(STokensBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &STokens{STokensCaller: STokensCaller{contract: contract}, STokensTransactor: STokensTransactor{contract: contract}, STokensFilterer: STokensFilterer{contract: contract}}, nil
}

// STokens is an auto generated Go binding around an Ethereum contract.
type STokens struct {
	STokensCaller     // Read-only binding to the contract
	STokensTransactor // Write-only binding to the contract
	STokensFilterer   // Log filterer for contract events
}

// STokensCaller is an auto generated read-only Go binding around an Ethereum contract.
type STokensCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// STokensTransactor is an auto generated write-only Go binding around an Ethereum contract.
type STokensTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// STokensFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type STokensFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// STokensSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type STokensSession struct {
	Contract     *STokens          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// STokensCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type STokensCallerSession struct {
	Contract *STokensCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// STokensTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type STokensTransactorSession struct {
	Contract     *STokensTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// STokensRaw is an auto generated low-level Go binding around an Ethereum contract.
type STokensRaw struct {
	Contract *STokens // Generic contract binding to access the raw methods on
}

// STokensCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type STokensCallerRaw struct {
	Contract *STokensCaller // Generic read-only contract binding to access the raw methods on
}

// STokensTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type STokensTransactorRaw struct {
	Contract *STokensTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSTokens creates a new instance of STokens, bound to a specific deployed contract.
func NewSTokens(address common.Address, backend bind.ContractBackend) (*STokens, error) {
	contract, err := bindSTokens(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &STokens{STokensCaller: STokensCaller{contract: contract}, STokensTransactor: STokensTransactor{contract: contract}, STokensFilterer: STokensFilterer{contract: contract}}, nil
}

// NewSTokensCaller creates a new read-only instance of STokens, bound to a specific deployed contract.
func NewSTokensCaller(address common.Address, caller bind.ContractCaller) (*STokensCaller, error) {
	contract, err := bindSTokens(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &STokensCaller{contract: contract}, nil
}

// NewSTokensTransactor creates a new write-only instance of STokens, bound to a specific deployed contract.
func NewSTokensTransactor(address common.Address, transactor bind.ContractTransactor) (*STokensTransactor, error) {
	contract, err := bindSTokens(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &STokensTransactor{contract: contract}, nil
}

// NewSTokensFilterer creates a new log filterer instance of STokens, bound to a specific deployed contract.
func NewSTokensFilterer(address common.Address, filterer bind.ContractFilterer) (*STokensFilterer, error) {
	contract, err := bindSTokens(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &STokensFilterer{contract: contract}, nil
}

// bindSTokens binds a generic wrapper to an already deployed contract.
func bindSTokens(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(STokensABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_STokens *STokensRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _STokens.Contract.STokensCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_STokens *STokensRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _STokens.Contract.STokensTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_STokens *STokensRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _STokens.Contract.STokensTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_STokens *STokensCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _STokens.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_STokens *STokensTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _STokens.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_STokens *STokensTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _STokens.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_STokens *STokensCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_STokens *STokensSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _STokens.Contract.DEFAULTADMINROLE(&_STokens.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_STokens *STokensCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _STokens.Contract.DEFAULTADMINROLE(&_STokens.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_STokens *STokensCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_STokens *STokensSession) PAUSERROLE() ([32]byte, error) {
	return _STokens.Contract.PAUSERROLE(&_STokens.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_STokens *STokensCallerSession) PAUSERROLE() ([32]byte, error) {
	return _STokens.Contract.PAUSERROLE(&_STokens.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_STokens *STokensCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_STokens *STokensSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _STokens.Contract.Allowance(&_STokens.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_STokens *STokensCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _STokens.Contract.Allowance(&_STokens.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_STokens *STokensCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_STokens *STokensSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _STokens.Contract.BalanceOf(&_STokens.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_STokens *STokensCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _STokens.Contract.BalanceOf(&_STokens.CallOpts, account)
}

// CalculatePendingRewards is a free data retrieval call binding the contract method 0x097aad10.
//
// Solidity: function calculatePendingRewards(address to) view returns(uint256 pendingRewards)
func (_STokens *STokensCaller) CalculatePendingRewards(opts *bind.CallOpts, to common.Address) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "calculatePendingRewards", to)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculatePendingRewards is a free data retrieval call binding the contract method 0x097aad10.
//
// Solidity: function calculatePendingRewards(address to) view returns(uint256 pendingRewards)
func (_STokens *STokensSession) CalculatePendingRewards(to common.Address) (*big.Int, error) {
	return _STokens.Contract.CalculatePendingRewards(&_STokens.CallOpts, to)
}

// CalculatePendingRewards is a free data retrieval call binding the contract method 0x097aad10.
//
// Solidity: function calculatePendingRewards(address to) view returns(uint256 pendingRewards)
func (_STokens *STokensCallerSession) CalculatePendingRewards(to common.Address) (*big.Int, error) {
	return _STokens.Contract.CalculatePendingRewards(&_STokens.CallOpts, to)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_STokens *STokensCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_STokens *STokensSession) Decimals() (uint8, error) {
	return _STokens.Contract.Decimals(&_STokens.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_STokens *STokensCallerSession) Decimals() (uint8, error) {
	return _STokens.Contract.Decimals(&_STokens.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256[] rewardRate, uint256 rewardDivisor)
func (_STokens *STokensCaller) GetRewardRate(opts *bind.CallOpts) (struct {
	RewardRate    []*big.Int
	RewardDivisor *big.Int
}, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "getRewardRate")

	outstruct := new(struct {
		RewardRate    []*big.Int
		RewardDivisor *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RewardRate = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	outstruct.RewardDivisor = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256[] rewardRate, uint256 rewardDivisor)
func (_STokens *STokensSession) GetRewardRate() (struct {
	RewardRate    []*big.Int
	RewardDivisor *big.Int
}, error) {
	return _STokens.Contract.GetRewardRate(&_STokens.CallOpts)
}

// GetRewardRate is a free data retrieval call binding the contract method 0x7e1a3786.
//
// Solidity: function getRewardRate() view returns(uint256[] rewardRate, uint256 rewardDivisor)
func (_STokens *STokensCallerSession) GetRewardRate() (struct {
	RewardRate    []*big.Int
	RewardDivisor *big.Int
}, error) {
	return _STokens.Contract.GetRewardRate(&_STokens.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_STokens *STokensCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_STokens *STokensSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _STokens.Contract.GetRoleAdmin(&_STokens.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_STokens *STokensCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _STokens.Contract.GetRoleAdmin(&_STokens.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_STokens *STokensCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_STokens *STokensSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _STokens.Contract.GetRoleMember(&_STokens.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_STokens *STokensCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _STokens.Contract.GetRoleMember(&_STokens.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_STokens *STokensCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_STokens *STokensSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _STokens.Contract.GetRoleMemberCount(&_STokens.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_STokens *STokensCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _STokens.Contract.GetRoleMemberCount(&_STokens.CallOpts, role)
}

// GetStakedBlock is a free data retrieval call binding the contract method 0xd04be575.
//
// Solidity: function getStakedBlock(address to) view returns(uint256 stakedBlocks)
func (_STokens *STokensCaller) GetStakedBlock(opts *bind.CallOpts, to common.Address) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "getStakedBlock", to)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakedBlock is a free data retrieval call binding the contract method 0xd04be575.
//
// Solidity: function getStakedBlock(address to) view returns(uint256 stakedBlocks)
func (_STokens *STokensSession) GetStakedBlock(to common.Address) (*big.Int, error) {
	return _STokens.Contract.GetStakedBlock(&_STokens.CallOpts, to)
}

// GetStakedBlock is a free data retrieval call binding the contract method 0xd04be575.
//
// Solidity: function getStakedBlock(address to) view returns(uint256 stakedBlocks)
func (_STokens *STokensCallerSession) GetStakedBlock(to common.Address) (*big.Int, error) {
	return _STokens.Contract.GetStakedBlock(&_STokens.CallOpts, to)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_STokens *STokensCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_STokens *STokensSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _STokens.Contract.HasRole(&_STokens.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_STokens *STokensCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _STokens.Contract.HasRole(&_STokens.CallOpts, role, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_STokens *STokensCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_STokens *STokensSession) Name() (string, error) {
	return _STokens.Contract.Name(&_STokens.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_STokens *STokensCallerSession) Name() (string, error) {
	return _STokens.Contract.Name(&_STokens.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_STokens *STokensCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_STokens *STokensSession) Paused() (bool, error) {
	return _STokens.Contract.Paused(&_STokens.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_STokens *STokensCallerSession) Paused() (bool, error) {
	return _STokens.Contract.Paused(&_STokens.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_STokens *STokensCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_STokens *STokensSession) Symbol() (string, error) {
	return _STokens.Contract.Symbol(&_STokens.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_STokens *STokensCallerSession) Symbol() (string, error) {
	return _STokens.Contract.Symbol(&_STokens.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_STokens *STokensCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _STokens.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_STokens *STokensSession) TotalSupply() (*big.Int, error) {
	return _STokens.Contract.TotalSupply(&_STokens.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_STokens *STokensCallerSession) TotalSupply() (*big.Int, error) {
	return _STokens.Contract.TotalSupply(&_STokens.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_STokens *STokensTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_STokens *STokensSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Approve(&_STokens.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_STokens *STokensTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Approve(&_STokens.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address from, uint256 tokens) returns(bool success)
func (_STokens *STokensTransactor) Burn(opts *bind.TransactOpts, from common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "burn", from, tokens)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address from, uint256 tokens) returns(bool success)
func (_STokens *STokensSession) Burn(from common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Burn(&_STokens.TransactOpts, from, tokens)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address from, uint256 tokens) returns(bool success)
func (_STokens *STokensTransactorSession) Burn(from common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Burn(&_STokens.TransactOpts, from, tokens)
}

// CalculateRewards is a paid mutator transaction binding the contract method 0x64ab8675.
//
// Solidity: function calculateRewards(address to) returns(bool success)
func (_STokens *STokensTransactor) CalculateRewards(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "calculateRewards", to)
}

// CalculateRewards is a paid mutator transaction binding the contract method 0x64ab8675.
//
// Solidity: function calculateRewards(address to) returns(bool success)
func (_STokens *STokensSession) CalculateRewards(to common.Address) (*types.Transaction, error) {
	return _STokens.Contract.CalculateRewards(&_STokens.TransactOpts, to)
}

// CalculateRewards is a paid mutator transaction binding the contract method 0x64ab8675.
//
// Solidity: function calculateRewards(address to) returns(bool success)
func (_STokens *STokensTransactorSession) CalculateRewards(to common.Address) (*types.Transaction, error) {
	return _STokens.Contract.CalculateRewards(&_STokens.TransactOpts, to)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_STokens *STokensTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_STokens *STokensSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.DecreaseAllowance(&_STokens.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_STokens *STokensTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.DecreaseAllowance(&_STokens.TransactOpts, spender, subtractedValue)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_STokens *STokensSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.GrantRole(&_STokens.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.GrantRole(&_STokens.TransactOpts, role, account)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_STokens *STokensTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_STokens *STokensSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.IncreaseAllowance(&_STokens.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_STokens *STokensTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.IncreaseAllowance(&_STokens.TransactOpts, spender, addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb990c59.
//
// Solidity: function initialize(address uaddress, address pauserAddress, uint256 rewardRate, uint256 rewardDivisor) returns()
func (_STokens *STokensTransactor) Initialize(opts *bind.TransactOpts, uaddress common.Address, pauserAddress common.Address, rewardRate *big.Int, rewardDivisor *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "initialize", uaddress, pauserAddress, rewardRate, rewardDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb990c59.
//
// Solidity: function initialize(address uaddress, address pauserAddress, uint256 rewardRate, uint256 rewardDivisor) returns()
func (_STokens *STokensSession) Initialize(uaddress common.Address, pauserAddress common.Address, rewardRate *big.Int, rewardDivisor *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Initialize(&_STokens.TransactOpts, uaddress, pauserAddress, rewardRate, rewardDivisor)
}

// Initialize is a paid mutator transaction binding the contract method 0xeb990c59.
//
// Solidity: function initialize(address uaddress, address pauserAddress, uint256 rewardRate, uint256 rewardDivisor) returns()
func (_STokens *STokensTransactorSession) Initialize(uaddress common.Address, pauserAddress common.Address, rewardRate *big.Int, rewardDivisor *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Initialize(&_STokens.TransactOpts, uaddress, pauserAddress, rewardRate, rewardDivisor)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokens) returns(bool success)
func (_STokens *STokensTransactor) Mint(opts *bind.TransactOpts, to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "mint", to, tokens)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokens) returns(bool success)
func (_STokens *STokensSession) Mint(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Mint(&_STokens.TransactOpts, to, tokens)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 tokens) returns(bool success)
func (_STokens *STokensTransactorSession) Mint(to common.Address, tokens *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Mint(&_STokens.TransactOpts, to, tokens)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_STokens *STokensTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_STokens *STokensSession) Pause() (*types.Transaction, error) {
	return _STokens.Contract.Pause(&_STokens.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns(bool success)
func (_STokens *STokensTransactorSession) Pause() (*types.Transaction, error) {
	return _STokens.Contract.Pause(&_STokens.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_STokens *STokensSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.RenounceRole(&_STokens.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.RenounceRole(&_STokens.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_STokens *STokensSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.RevokeRole(&_STokens.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_STokens *STokensTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _STokens.Contract.RevokeRole(&_STokens.TransactOpts, role, account)
}

// SetLiquidStakingContract is a paid mutator transaction binding the contract method 0x58f8943e.
//
// Solidity: function setLiquidStakingContract(address liquidStakingContract) returns()
func (_STokens *STokensTransactor) SetLiquidStakingContract(opts *bind.TransactOpts, liquidStakingContract common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "setLiquidStakingContract", liquidStakingContract)
}

// SetLiquidStakingContract is a paid mutator transaction binding the contract method 0x58f8943e.
//
// Solidity: function setLiquidStakingContract(address liquidStakingContract) returns()
func (_STokens *STokensSession) SetLiquidStakingContract(liquidStakingContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetLiquidStakingContract(&_STokens.TransactOpts, liquidStakingContract)
}

// SetLiquidStakingContract is a paid mutator transaction binding the contract method 0x58f8943e.
//
// Solidity: function setLiquidStakingContract(address liquidStakingContract) returns()
func (_STokens *STokensTransactorSession) SetLiquidStakingContract(liquidStakingContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetLiquidStakingContract(&_STokens.TransactOpts, liquidStakingContract)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 rewardRate) returns(bool success)
func (_STokens *STokensTransactor) SetRewardRate(opts *bind.TransactOpts, rewardRate *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "setRewardRate", rewardRate)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 rewardRate) returns(bool success)
func (_STokens *STokensSession) SetRewardRate(rewardRate *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.SetRewardRate(&_STokens.TransactOpts, rewardRate)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 rewardRate) returns(bool success)
func (_STokens *STokensTransactorSession) SetRewardRate(rewardRate *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.SetRewardRate(&_STokens.TransactOpts, rewardRate)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uTokenContract) returns()
func (_STokens *STokensTransactor) SetUTokensContract(opts *bind.TransactOpts, uTokenContract common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "setUTokensContract", uTokenContract)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uTokenContract) returns()
func (_STokens *STokensSession) SetUTokensContract(uTokenContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetUTokensContract(&_STokens.TransactOpts, uTokenContract)
}

// SetUTokensContract is a paid mutator transaction binding the contract method 0x21bdf9e5.
//
// Solidity: function setUTokensContract(address uTokenContract) returns()
func (_STokens *STokensTransactorSession) SetUTokensContract(uTokenContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetUTokensContract(&_STokens.TransactOpts, uTokenContract)
}

// SetWrapperContract is a paid mutator transaction binding the contract method 0x4e558127.
//
// Solidity: function setWrapperContract(address wrapperContract) returns()
func (_STokens *STokensTransactor) SetWrapperContract(opts *bind.TransactOpts, wrapperContract common.Address) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "setWrapperContract", wrapperContract)
}

// SetWrapperContract is a paid mutator transaction binding the contract method 0x4e558127.
//
// Solidity: function setWrapperContract(address wrapperContract) returns()
func (_STokens *STokensSession) SetWrapperContract(wrapperContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetWrapperContract(&_STokens.TransactOpts, wrapperContract)
}

// SetWrapperContract is a paid mutator transaction binding the contract method 0x4e558127.
//
// Solidity: function setWrapperContract(address wrapperContract) returns()
func (_STokens *STokensTransactorSession) SetWrapperContract(wrapperContract common.Address) (*types.Transaction, error) {
	return _STokens.Contract.SetWrapperContract(&_STokens.TransactOpts, wrapperContract)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_STokens *STokensTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_STokens *STokensSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Transfer(&_STokens.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_STokens *STokensTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.Transfer(&_STokens.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_STokens *STokensTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_STokens *STokensSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.TransferFrom(&_STokens.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_STokens *STokensTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _STokens.Contract.TransferFrom(&_STokens.TransactOpts, sender, recipient, amount)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_STokens *STokensTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _STokens.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_STokens *STokensSession) Unpause() (*types.Transaction, error) {
	return _STokens.Contract.Unpause(&_STokens.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns(bool success)
func (_STokens *STokensTransactorSession) Unpause() (*types.Transaction, error) {
	return _STokens.Contract.Unpause(&_STokens.TransactOpts)
}

// STokensApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the STokens contract.
type STokensApprovalIterator struct {
	Event *STokensApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensApproval represents a Approval event raised by the STokens contract.
type STokensApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_STokens *STokensFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*STokensApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &STokensApprovalIterator{contract: _STokens.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_STokens *STokensFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *STokensApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensApproval)
				if err := _STokens.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_STokens *STokensFilterer) ParseApproval(log types.Log) (*STokensApproval, error) {
	event := new(STokensApproval)
	if err := _STokens.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensCalculateRewardsIterator is returned from FilterCalculateRewards and is used to iterate over the raw logs and unpacked data for CalculateRewards events raised by the STokens contract.
type STokensCalculateRewardsIterator struct {
	Event *STokensCalculateRewards // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensCalculateRewardsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensCalculateRewards)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensCalculateRewards)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensCalculateRewardsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensCalculateRewardsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensCalculateRewards represents a CalculateRewards event raised by the STokens contract.
type STokensCalculateRewards struct {
	AccountAddress common.Address
	Tokens         *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCalculateRewards is a free log retrieval operation binding the contract event 0x01ea729deb12fa912e813101b1da8b7c1500f7f26c912a612221a02af6a56220.
//
// Solidity: event CalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) FilterCalculateRewards(opts *bind.FilterOpts, accountAddress []common.Address) (*STokensCalculateRewardsIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "CalculateRewards", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &STokensCalculateRewardsIterator{contract: _STokens.contract, event: "CalculateRewards", logs: logs, sub: sub}, nil
}

// WatchCalculateRewards is a free log subscription operation binding the contract event 0x01ea729deb12fa912e813101b1da8b7c1500f7f26c912a612221a02af6a56220.
//
// Solidity: event CalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) WatchCalculateRewards(opts *bind.WatchOpts, sink chan<- *STokensCalculateRewards, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "CalculateRewards", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensCalculateRewards)
				if err := _STokens.contract.UnpackLog(event, "CalculateRewards", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCalculateRewards is a log parse operation binding the contract event 0x01ea729deb12fa912e813101b1da8b7c1500f7f26c912a612221a02af6a56220.
//
// Solidity: event CalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) ParseCalculateRewards(log types.Log) (*STokensCalculateRewards, error) {
	event := new(STokensCalculateRewards)
	if err := _STokens.contract.UnpackLog(event, "CalculateRewards", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the STokens contract.
type STokensPausedIterator struct {
	Event *STokensPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensPaused represents a Paused event raised by the STokens contract.
type STokensPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_STokens *STokensFilterer) FilterPaused(opts *bind.FilterOpts) (*STokensPausedIterator, error) {

	logs, sub, err := _STokens.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &STokensPausedIterator{contract: _STokens.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_STokens *STokensFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *STokensPaused) (event.Subscription, error) {

	logs, sub, err := _STokens.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensPaused)
				if err := _STokens.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_STokens *STokensFilterer) ParsePaused(log types.Log) (*STokensPaused, error) {
	event := new(STokensPaused)
	if err := _STokens.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the STokens contract.
type STokensRoleAdminChangedIterator struct {
	Event *STokensRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensRoleAdminChanged represents a RoleAdminChanged event raised by the STokens contract.
type STokensRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_STokens *STokensFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*STokensRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &STokensRoleAdminChangedIterator{contract: _STokens.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_STokens *STokensFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *STokensRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensRoleAdminChanged)
				if err := _STokens.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_STokens *STokensFilterer) ParseRoleAdminChanged(log types.Log) (*STokensRoleAdminChanged, error) {
	event := new(STokensRoleAdminChanged)
	if err := _STokens.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the STokens contract.
type STokensRoleGrantedIterator struct {
	Event *STokensRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensRoleGranted represents a RoleGranted event raised by the STokens contract.
type STokensRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*STokensRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &STokensRoleGrantedIterator{contract: _STokens.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *STokensRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensRoleGranted)
				if err := _STokens.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) ParseRoleGranted(log types.Log) (*STokensRoleGranted, error) {
	event := new(STokensRoleGranted)
	if err := _STokens.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the STokens contract.
type STokensRoleRevokedIterator struct {
	Event *STokensRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensRoleRevoked represents a RoleRevoked event raised by the STokens contract.
type STokensRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*STokensRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &STokensRoleRevokedIterator{contract: _STokens.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *STokensRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensRoleRevoked)
				if err := _STokens.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_STokens *STokensFilterer) ParseRoleRevoked(log types.Log) (*STokensRoleRevoked, error) {
	event := new(STokensRoleRevoked)
	if err := _STokens.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensSetLiquidStakingContractIterator is returned from FilterSetLiquidStakingContract and is used to iterate over the raw logs and unpacked data for SetLiquidStakingContract events raised by the STokens contract.
type STokensSetLiquidStakingContractIterator struct {
	Event *STokensSetLiquidStakingContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensSetLiquidStakingContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensSetLiquidStakingContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensSetLiquidStakingContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensSetLiquidStakingContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensSetLiquidStakingContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensSetLiquidStakingContract represents a SetLiquidStakingContract event raised by the STokens contract.
type STokensSetLiquidStakingContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetLiquidStakingContract is a free log retrieval operation binding the contract event 0x57fded54c0f01b7b2c662bd89530d6916e48149e02da384db87d1a67306be871.
//
// Solidity: event SetLiquidStakingContract(address indexed _contract)
func (_STokens *STokensFilterer) FilterSetLiquidStakingContract(opts *bind.FilterOpts, _contract []common.Address) (*STokensSetLiquidStakingContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "SetLiquidStakingContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &STokensSetLiquidStakingContractIterator{contract: _STokens.contract, event: "SetLiquidStakingContract", logs: logs, sub: sub}, nil
}

// WatchSetLiquidStakingContract is a free log subscription operation binding the contract event 0x57fded54c0f01b7b2c662bd89530d6916e48149e02da384db87d1a67306be871.
//
// Solidity: event SetLiquidStakingContract(address indexed _contract)
func (_STokens *STokensFilterer) WatchSetLiquidStakingContract(opts *bind.WatchOpts, sink chan<- *STokensSetLiquidStakingContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "SetLiquidStakingContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensSetLiquidStakingContract)
				if err := _STokens.contract.UnpackLog(event, "SetLiquidStakingContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetLiquidStakingContract is a log parse operation binding the contract event 0x57fded54c0f01b7b2c662bd89530d6916e48149e02da384db87d1a67306be871.
//
// Solidity: event SetLiquidStakingContract(address indexed _contract)
func (_STokens *STokensFilterer) ParseSetLiquidStakingContract(log types.Log) (*STokensSetLiquidStakingContract, error) {
	event := new(STokensSetLiquidStakingContract)
	if err := _STokens.contract.UnpackLog(event, "SetLiquidStakingContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensSetUTokensContractIterator is returned from FilterSetUTokensContract and is used to iterate over the raw logs and unpacked data for SetUTokensContract events raised by the STokens contract.
type STokensSetUTokensContractIterator struct {
	Event *STokensSetUTokensContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensSetUTokensContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensSetUTokensContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensSetUTokensContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensSetUTokensContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensSetUTokensContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensSetUTokensContract represents a SetUTokensContract event raised by the STokens contract.
type STokensSetUTokensContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetUTokensContract is a free log retrieval operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_STokens *STokensFilterer) FilterSetUTokensContract(opts *bind.FilterOpts, _contract []common.Address) (*STokensSetUTokensContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &STokensSetUTokensContractIterator{contract: _STokens.contract, event: "SetUTokensContract", logs: logs, sub: sub}, nil
}

// WatchSetUTokensContract is a free log subscription operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_STokens *STokensFilterer) WatchSetUTokensContract(opts *bind.WatchOpts, sink chan<- *STokensSetUTokensContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "SetUTokensContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensSetUTokensContract)
				if err := _STokens.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetUTokensContract is a log parse operation binding the contract event 0xf745c285f36f88bea6af14d4d0f33dd9350cef7895216c1615b1caaee7857e0c.
//
// Solidity: event SetUTokensContract(address indexed _contract)
func (_STokens *STokensFilterer) ParseSetUTokensContract(log types.Log) (*STokensSetUTokensContract, error) {
	event := new(STokensSetUTokensContract)
	if err := _STokens.contract.UnpackLog(event, "SetUTokensContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensSetWrapperContractIterator is returned from FilterSetWrapperContract and is used to iterate over the raw logs and unpacked data for SetWrapperContract events raised by the STokens contract.
type STokensSetWrapperContractIterator struct {
	Event *STokensSetWrapperContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensSetWrapperContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensSetWrapperContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensSetWrapperContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensSetWrapperContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensSetWrapperContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensSetWrapperContract represents a SetWrapperContract event raised by the STokens contract.
type STokensSetWrapperContract struct {
	Contract common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetWrapperContract is a free log retrieval operation binding the contract event 0xe64d0ea1a8162224d25416ba9164fe1dae6ec14e9f846220b287c0c1c9413e05.
//
// Solidity: event SetWrapperContract(address indexed _contract)
func (_STokens *STokensFilterer) FilterSetWrapperContract(opts *bind.FilterOpts, _contract []common.Address) (*STokensSetWrapperContractIterator, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "SetWrapperContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return &STokensSetWrapperContractIterator{contract: _STokens.contract, event: "SetWrapperContract", logs: logs, sub: sub}, nil
}

// WatchSetWrapperContract is a free log subscription operation binding the contract event 0xe64d0ea1a8162224d25416ba9164fe1dae6ec14e9f846220b287c0c1c9413e05.
//
// Solidity: event SetWrapperContract(address indexed _contract)
func (_STokens *STokensFilterer) WatchSetWrapperContract(opts *bind.WatchOpts, sink chan<- *STokensSetWrapperContract, _contract []common.Address) (event.Subscription, error) {

	var _contractRule []interface{}
	for _, _contractItem := range _contract {
		_contractRule = append(_contractRule, _contractItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "SetWrapperContract", _contractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensSetWrapperContract)
				if err := _STokens.contract.UnpackLog(event, "SetWrapperContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetWrapperContract is a log parse operation binding the contract event 0xe64d0ea1a8162224d25416ba9164fe1dae6ec14e9f846220b287c0c1c9413e05.
//
// Solidity: event SetWrapperContract(address indexed _contract)
func (_STokens *STokensFilterer) ParseSetWrapperContract(log types.Log) (*STokensSetWrapperContract, error) {
	event := new(STokensSetWrapperContract)
	if err := _STokens.contract.UnpackLog(event, "SetWrapperContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the STokens contract.
type STokensTransferIterator struct {
	Event *STokensTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensTransfer represents a Transfer event raised by the STokens contract.
type STokensTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_STokens *STokensFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*STokensTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &STokensTransferIterator{contract: _STokens.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_STokens *STokensFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *STokensTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensTransfer)
				if err := _STokens.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_STokens *STokensFilterer) ParseTransfer(log types.Log) (*STokensTransfer, error) {
	event := new(STokensTransfer)
	if err := _STokens.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensTriggeredCalculateRewardsIterator is returned from FilterTriggeredCalculateRewards and is used to iterate over the raw logs and unpacked data for TriggeredCalculateRewards events raised by the STokens contract.
type STokensTriggeredCalculateRewardsIterator struct {
	Event *STokensTriggeredCalculateRewards // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensTriggeredCalculateRewardsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensTriggeredCalculateRewards)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensTriggeredCalculateRewards)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensTriggeredCalculateRewardsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensTriggeredCalculateRewardsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensTriggeredCalculateRewards represents a TriggeredCalculateRewards event raised by the STokens contract.
type STokensTriggeredCalculateRewards struct {
	AccountAddress common.Address
	Tokens         *big.Int
	Timestamp      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTriggeredCalculateRewards is a free log retrieval operation binding the contract event 0xd0194489832efa41a56f4a4add6fbbe260998cbcff0b43c953af28b545ca7a01.
//
// Solidity: event TriggeredCalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) FilterTriggeredCalculateRewards(opts *bind.FilterOpts, accountAddress []common.Address) (*STokensTriggeredCalculateRewardsIterator, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _STokens.contract.FilterLogs(opts, "TriggeredCalculateRewards", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return &STokensTriggeredCalculateRewardsIterator{contract: _STokens.contract, event: "TriggeredCalculateRewards", logs: logs, sub: sub}, nil
}

// WatchTriggeredCalculateRewards is a free log subscription operation binding the contract event 0xd0194489832efa41a56f4a4add6fbbe260998cbcff0b43c953af28b545ca7a01.
//
// Solidity: event TriggeredCalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) WatchTriggeredCalculateRewards(opts *bind.WatchOpts, sink chan<- *STokensTriggeredCalculateRewards, accountAddress []common.Address) (event.Subscription, error) {

	var accountAddressRule []interface{}
	for _, accountAddressItem := range accountAddress {
		accountAddressRule = append(accountAddressRule, accountAddressItem)
	}

	logs, sub, err := _STokens.contract.WatchLogs(opts, "TriggeredCalculateRewards", accountAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensTriggeredCalculateRewards)
				if err := _STokens.contract.UnpackLog(event, "TriggeredCalculateRewards", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTriggeredCalculateRewards is a log parse operation binding the contract event 0xd0194489832efa41a56f4a4add6fbbe260998cbcff0b43c953af28b545ca7a01.
//
// Solidity: event TriggeredCalculateRewards(address indexed accountAddress, uint256 tokens, uint256 timestamp)
func (_STokens *STokensFilterer) ParseTriggeredCalculateRewards(log types.Log) (*STokensTriggeredCalculateRewards, error) {
	event := new(STokensTriggeredCalculateRewards)
	if err := _STokens.contract.UnpackLog(event, "TriggeredCalculateRewards", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// STokensUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the STokens contract.
type STokensUnpausedIterator struct {
	Event *STokensUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *STokensUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(STokensUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(STokensUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *STokensUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *STokensUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// STokensUnpaused represents a Unpaused event raised by the STokens contract.
type STokensUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_STokens *STokensFilterer) FilterUnpaused(opts *bind.FilterOpts) (*STokensUnpausedIterator, error) {

	logs, sub, err := _STokens.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &STokensUnpausedIterator{contract: _STokens.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_STokens *STokensFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *STokensUnpaused) (event.Subscription, error) {

	logs, sub, err := _STokens.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(STokensUnpaused)
				if err := _STokens.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_STokens *STokensFilterer) ParseUnpaused(log types.Log) (*STokensUnpaused, error) {
	event := new(STokensUnpaused)
	if err := _STokens.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
